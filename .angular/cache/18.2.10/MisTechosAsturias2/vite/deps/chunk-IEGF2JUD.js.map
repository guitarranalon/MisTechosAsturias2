{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/structs/RBush.js", "../../../../../../node_modules/ol/source/VectorEventType.js", "../../../../../../node_modules/ol/loadingstrategy.js", "../../../../../../node_modules/ol/format/FormatType.js", "../../../../../../node_modules/ol/featureloader.js", "../../../../../../node_modules/ol/source/Vector.js"],
  "sourcesContent": ["/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = /** @class */function () {\n  /**\n   * @param {number=} opt_maxEntries Max entries.\n   */\n  function RBush(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n  }\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  RBush.prototype.insert = function (extent, value) {\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  };\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  RBush.prototype.load = function (extents, values) {\n    var items = new Array(values.length);\n    for (var i = 0, l = values.length; i < l; i++) {\n      var extent = extents[i];\n      var value = values[i];\n      /** @type {Entry} */\n      var item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  };\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  RBush.prototype.remove = function (value) {\n    var uid = getUid(value);\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    var item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  };\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  RBush.prototype.update = function (extent, value) {\n    var item = this.items_[getUid(value)];\n    var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  };\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  RBush.prototype.getAll = function () {\n    var items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  RBush.prototype.getInExtent = function (extent) {\n    /** @type {Entry} */\n    var bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    var items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  RBush.prototype.forEach = function (callback) {\n    return this.forEach_(this.getAll(), callback);\n  };\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  RBush.prototype.forEachInExtent = function (extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  };\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n  RBush.prototype.forEach_ = function (values, callback) {\n    var result;\n    for (var i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  RBush.prototype.isEmpty = function () {\n    return isEmpty(this.items_);\n  };\n  /**\n   * Remove all values from the RBush.\n   */\n  RBush.prototype.clear = function () {\n    this.rbush_.clear();\n    this.items_ = {};\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  RBush.prototype.getExtent = function (opt_extent) {\n    var data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  };\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  RBush.prototype.concat = function (rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (var i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  };\n  return RBush;\n}();\nexport default RBush;\n", "/**\n * @module ol/source/VectorEventType\n */\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a feature is added to the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\n   * @api\n   */\n  ADDFEATURE: 'addfeature',\n  /**\n   * Triggered when a feature is updated.\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\n   * @api\n   */\n  CHANGEFEATURE: 'changefeature',\n  /**\n   * Triggered when the clear method is called on the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\n   * @api\n   */\n  CLEAR: 'clear',\n  /**\n   * Triggered when a feature is removed from the source.\n   * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\n   * @api\n   */\n  REMOVEFEATURE: 'removefeature',\n  /**\n   * Triggered when features starts loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\n   * @api\n   */\n  FEATURESLOADSTART: 'featuresloadstart',\n  /**\n   * Triggered when features finishes loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\n   * @api\n   */\n  FEATURESLOADEND: 'featuresloadend',\n  /**\n   * Triggered if feature loading results in an error.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\n   * @api\n   */\n  FEATURESLOADERROR: 'featuresloaderror'\n};\n", "/**\n * @module ol/loadingstrategy\n */\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution) {\n      var z = tileGrid.getZForResolution(resolution);\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      var tileCoord = [z, 0, 0];\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n      return extents;\n    }\n  );\n}\n", "/**\n * @module ol/format/FormatType\n */\n/**\n * @enum {string}\n */\nexport default {\n  ARRAY_BUFFER: 'arraybuffer',\n  JSON: 'json',\n  TEXT: 'text',\n  XML: 'xml'\n};\n", "/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection} for the projection and success and failure callbacks as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n  if (format.getType() == FormatType.ARRAY_BUFFER) {\n    xhr.responseType = 'arraybuffer';\n  }\n  xhr.withCredentials = withCredentials;\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  xhr.onload = function (event) {\n    // status will be 0 for file:// urls\n    if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n      var type = format.getType();\n      /** @type {Document|Node|Object|string|undefined} */\n      var source = void 0;\n      if (type == FormatType.JSON || type == FormatType.TEXT) {\n        source = xhr.responseText;\n      } else if (type == FormatType.XML) {\n        source = xhr.responseXML;\n        if (!source) {\n          source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n        }\n      } else if (type == FormatType.ARRAY_BUFFER) {\n        source = /** @type {ArrayBuffer} */xhr.response;\n      }\n      if (source) {\n        success(/** @type {Array<import(\"./Feature.js\").default>} */\n        format.readFeatures(source, {\n          extent: extent,\n          featureProjection: projection\n        }), format.readProjection(source));\n      } else {\n        failure();\n      }\n    } else {\n      failure();\n    }\n  };\n  /**\n   * @private\n   */\n  xhr.onerror = failure;\n  xhr.send();\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\n   * @param {function(): void=} success Success\n   *      Function called when loading succeeded.\n   * @param {function(): void=} failure Failure\n   *      Function called when loading failed.\n   * @this {import(\"./source/Vector\").default}\n   */\n  return function (extent, resolution, projection, success, failure) {\n    var source = /** @type {import(\"./source/Vector\").default} */this;\n    loadFeaturesXhr(url, format, extent, resolution, projection,\n    /**\n     * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n     * projection.\n     */\n    function (features, dataProjection) {\n      if (success !== undefined) {\n        success(features);\n      }\n      source.addFeatures(features);\n    }, /* FIXME handle error */failure ? failure : VOID);\n  };\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}\n", "/**\n * @module ol/source/Vector\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getUid } from '../util.js';\nimport { getValues, isEmpty } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { xhr } from '../featureloader.js';\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nvar VectorSourceEvent = /** @class */function (_super) {\n  __extends(VectorSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>=} opt_feature Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>=} opt_features Features.\n   */\n  function VectorSourceEvent(type, opt_feature, opt_features) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    _this.feature = opt_feature;\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */\n    _this.features = opt_features;\n    return _this;\n  }\n  return VectorSourceEvent;\n}(Event);\nexport { VectorSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nvar VectorSource = /** @class */function (_super) {\n  __extends(VectorSource, _super);\n  /**\n   * @param {Options=} opt_options Vector source options.\n   */\n  function VectorSource(opt_options) {\n    var _this = this;\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    _this.loader_ = VOID;\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    _this.format_ = options.format;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    _this.url_ = options.url;\n    if (options.loader !== undefined) {\n      _this.loader_ = options.loader;\n    } else if (_this.url_ !== undefined) {\n      assert(_this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      _this.loader_ = xhr(_this.url_, /** @type {import(\"../format/Feature.js\").default} */_this.format_);\n    }\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    _this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    _this.loadedExtentsRtree_ = new RBush();\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.nullGeometryFeatures_ = {};\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.idIndex_ = {};\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.uidIndex_ = {};\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    _this.featureChangeKeys_ = {};\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.featuresCollection_ = null;\n    var collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      _this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      _this.bindFeaturesCollection_(collection);\n    }\n    return _this;\n  }\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  VectorSource.prototype.addFeature = function (feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.addFeatureInternal = function (feature) {\n    var featureKey = getUid(feature);\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n    this.setupChangeEvents_(featureKey, feature);\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n  VectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  VectorSource.prototype.addToIndex_ = function (featureKey, feature) {\n    var valid = true;\n    var id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  };\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n  VectorSource.prototype.addFeatures = function (features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  };\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n  VectorSource.prototype.addFeaturesInternal = function (features) {\n    var extents = [];\n    var newFeatures = [];\n    var geometryFeatures = [];\n    for (var i = 0, length_1 = features.length; i < length_1; i++) {\n      var feature = features[i];\n      var featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n    for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {\n      var feature = newFeatures[i];\n      var featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n      var geometry = feature.getGeometry();\n      if (geometry) {\n        var extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n    for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n    }\n  };\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n  VectorSource.prototype.bindFeaturesCollection_ = function (collection) {\n    var modifyingCollection = false;\n    this.addEventListener(VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    this.addEventListener(VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    collection.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature(/** @type {import(\"../Feature.js\").default<Geometry>} */evt.element);\n        modifyingCollection = false;\n      }\n    }.bind(this));\n    collection.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature(/** @type {import(\"../Feature.js\").default<Geometry>} */evt.element);\n        modifyingCollection = false;\n      }\n    }.bind(this));\n    this.featuresCollection_ = collection;\n  };\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  VectorSource.prototype.clear = function (opt_fast) {\n    if (opt_fast) {\n      for (var featureId in this.featureChangeKeys_) {\n        var keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));\n        for (var id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n    var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  };\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeature = function (callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  VectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {\n    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  };\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsExtent(extent)) {\n        var result = callback(feature);\n        if (result) {\n          return result;\n        }\n      }\n    });\n  };\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>} The collection of features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesCollection = function () {\n    return this.featuresCollection_;\n  };\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeatures = function () {\n    var features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */features;\n  };\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {\n    var features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  };\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesInExtent = function (extent) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.getInExtent(extent);\n    } else if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray();\n    } else {\n      return [];\n    }\n  };\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n  VectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var closestFeature = null;\n    var closestPoint = [NaN, NaN];\n    var minSquaredDistance = Infinity;\n    var extent = [-Infinity, -Infinity, Infinity, Infinity];\n    var filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        var geometry = feature.getGeometry();\n        var previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature;\n          // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n          var minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  };\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  VectorSource.prototype.getExtent = function (opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  };\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   * @api\n   */\n  VectorSource.prototype.getFeatureById = function (id) {\n    var feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  };\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   */\n  VectorSource.prototype.getFeatureByUid = function (uid) {\n    var feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  };\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  VectorSource.prototype.getFormat = function () {\n    return this.format_;\n  };\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  VectorSource.prototype.getOverlaps = function () {\n    return this.overlaps_;\n  };\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  VectorSource.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  VectorSource.prototype.handleFeatureChange_ = function (event) {\n    var feature = /** @type {import(\"../Feature.js\").default<Geometry>} */event.target;\n    var featureKey = getUid(feature);\n    var geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      var extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    var id = feature.getId();\n    if (id !== undefined) {\n      var sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  };\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  VectorSource.prototype.hasFeature = function (feature) {\n    var id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.uidIndex_;\n    }\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  VectorSource.prototype.isEmpty = function () {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  VectorSource.prototype.loadFeatures = function (extent, resolution, projection) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    var _loop_1 = function (i, ii) {\n      var extentToLoad = extentsToLoad[i];\n      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n      if (!alreadyLoaded) {\n        this_1.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADSTART));\n        this_1.loader_.call(this_1, extentToLoad, resolution, projection, function (features) {\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADEND, undefined, features));\n        }.bind(this_1), function () {\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADERROR));\n        }.bind(this_1));\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n        this_1.loading = this_1.loader_ !== VOID;\n      }\n    };\n    var this_1 = this;\n    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      _loop_1(i, ii);\n    }\n  };\n  VectorSource.prototype.refresh = function () {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  VectorSource.prototype.removeLoadedExtent = function (extent) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  };\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n  VectorSource.prototype.removeFeature = function (feature) {\n    var featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.removeFeatureInternal = function (feature) {\n    var featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    var id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n  };\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  VectorSource.prototype.removeFromIdIndex_ = function (feature) {\n    var removed = false;\n    for (var id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  };\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  VectorSource.prototype.setLoader = function (loader) {\n    this.loader_ = loader;\n  };\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  VectorSource.prototype.setUrl = function (url) {\n    assert(this.format_, 7); // `format` must be set when `url` is set\n    this.setLoader(xhr(url, this.format_));\n  };\n  return VectorSource;\n}(Source);\nexport default VectorSource;\n"],
  "mappings": "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",
  "names": ["RBush", "xhr", "d", "b", "VectorSourceEvent", "VectorSource", "i", "ii"]
}
