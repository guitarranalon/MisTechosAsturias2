{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/color.js", "../../../../../../node_modules/ol/style/IconImageCache.js"],
  "sourcesContent": ["/**\n * @module ol/color\n */\nimport { assert } from './asserts.js';\nimport { clamp } from './math.js';\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nvar HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nvar NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    var rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport var fromString = function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n  /**\n   * @const\n   * @type {number}\n   */\n  var MAX_CACHE_SIZE = 1024;\n  /**\n   * @type {Object<string, Color>}\n   */\n  var cache = {};\n  /**\n   * @type {number}\n   */\n  var cacheSize = 0;\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      var color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          var i = 0;\n          for (var key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n}();\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n  var r, g, b, a, color;\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    var n = s.length - 1; // number of hex digits\n    var d =\n    // number of digits per channel\n    void 0; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n  return color;\n}\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp(color[0] + 0.5 | 0, 0, 255);\n  color[1] = clamp(color[1] + 0.5 | 0, 0, 255);\n  color[2] = clamp(color[2] + 0.5 | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  var r = color[0];\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n  var g = color[1];\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n  var b = color[2];\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n  var a = color[3] === undefined ? 1 : color[3];\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n  return HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0;\n}\n", "/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\nvar IconImageCache = /** @class */function () {\n  function IconImageCache() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxCacheSize_ = 32;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n  IconImageCache.prototype.clear = function () {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  };\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  IconImageCache.prototype.canExpireCache = function () {\n    return this.cacheSize_ > this.maxCacheSize_;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n  IconImageCache.prototype.expire = function () {\n    if (this.canExpireCache()) {\n      var i = 0;\n      for (var key in this.cache_) {\n        var iconImage = this.cache_[key];\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n  IconImageCache.prototype.get = function (src, crossOrigin, color) {\n    var key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n  IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n    var key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  };\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n  IconImageCache.prototype.setSize = function (maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  };\n  return IconImageCache;\n}();\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport var shared = new IconImageCache();\n"],
  "mappings": "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",
  "names": ["IconImageCache"]
}
