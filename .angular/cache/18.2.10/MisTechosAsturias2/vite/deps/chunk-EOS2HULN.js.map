{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/MapEventType.js", "../../../../../../node_modules/ol/Overlay.js"],
  "sourcesContent": ["/**\n * @module ol/MapEventType\n */\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered after a map frame is rendered.\n   * @event module:ol/MapEvent~MapEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n  /**\n   * Triggered when the map starts moving.\n   * @event module:ol/MapEvent~MapEvent#movestart\n   * @api\n   */\n  MOVESTART: 'movestart',\n  /**\n   * Triggered after the map is moved.\n   * @event module:ol/MapEvent~MapEvent#moveend\n   * @api\n   */\n  MOVEEND: 'moveend'\n};\n", "var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Overlay\n */\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {import(\"./OverlayPositioning.js\").default} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing~inAndOut}.\n */\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */function (_super) {\n  __extends(Overlay, _super);\n  /**\n   * @param {Options} options Overlay options.\n   */\n  function Overlay(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {Options}\n     */\n    _this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    _this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.element = document.createElement('div');\n    _this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    _this.element.style.position = 'absolute';\n    _this.element.style.pointerEvents = 'auto';\n    var autoPan = options.autoPan;\n    if (autoPan && 'object' !== typeof autoPan) {\n      autoPan = {\n        animation: options.autoPanAnimation,\n        margin: options.autoPanMargin\n      };\n    }\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|false}\n     */\n    _this.autoPan = /** @type {PanIntoViewOptions} */autoPan || false;\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    _this.rendered = {\n      transform_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.mapPostrenderListenerKey = null;\n    _this.addEventListener(getChangeEventType(Property.ELEMENT), _this.handleElementChanged);\n    _this.addEventListener(getChangeEventType(Property.MAP), _this.handleMapChanged);\n    _this.addEventListener(getChangeEventType(Property.OFFSET), _this.handleOffsetChanged);\n    _this.addEventListener(getChangeEventType(Property.POSITION), _this.handlePositionChanged);\n    _this.addEventListener(getChangeEventType(Property.POSITIONING), _this.handlePositioningChanged);\n    if (options.element !== undefined) {\n      _this.setElement(options.element);\n    }\n    _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n    _this.setPositioning(options.positioning !== undefined ? (/** @type {import(\"./OverlayPositioning.js\").default} */options.positioning) : OverlayPositioning.TOP_LEFT);\n    if (options.position !== undefined) {\n      _this.setPosition(options.position);\n    }\n    return _this;\n  }\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getElement = function () {\n    return /** @type {HTMLElement|undefined} */this.get(Property.ELEMENT);\n  };\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  Overlay.prototype.getId = function () {\n    return this.id;\n  };\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getMap = function () {\n    return /** @type {import(\"./PluggableMap.js\").default|undefined} */this.get(Property.MAP);\n  };\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getOffset = function () {\n    return /** @type {Array<number>} */this.get(Property.OFFSET);\n  };\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getPosition = function () {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(Property.POSITION);\n  };\n  /**\n   * Get the current positioning of this overlay.\n   * @return {import(\"./OverlayPositioning.js\").default} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getPositioning = function () {\n    return /** @type {import(\"./OverlayPositioning.js\").default} */this.get(Property.POSITIONING);\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handleElementChanged = function () {\n    removeChildren(this.element);\n    var element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handleMapChanged = function () {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    var map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.render = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handleOffsetChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handlePositionChanged = function () {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handlePositioningChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setElement = function (element) {\n    this.set(Property.ELEMENT, element);\n  };\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setMap = function (map) {\n    this.set(Property.MAP, map);\n  };\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setOffset = function (offset) {\n    this.set(Property.OFFSET, offset);\n  };\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setPosition = function (position) {\n    this.set(Property.POSITION, position);\n  };\n  /**\n   * Pan the map so that the overlay is entirely visisble in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  Overlay.prototype.performAutoPan = function () {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions=} opt_panIntoViewOptions Options for the pan action\n   * @api\n   */\n  Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n    var map = this.getMap();\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n    var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    var element = this.getElement();\n    var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    var panIntoViewOptions = opt_panIntoViewOptions || {};\n    var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      var offsetLeft = overlayRect[0] - mapRect[0];\n      var offsetRight = mapRect[2] - overlayRect[2];\n      var offsetTop = overlayRect[1] - mapRect[1];\n      var offsetBottom = mapRect[3] - overlayRect[3];\n      var delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        var center = /** @type {import(\"./coordinate.js\").Coordinate} */map.getView().getCenterInternal();\n        var centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        var panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  };\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  Overlay.prototype.getRect = function (element, size) {\n    var box = element.getBoundingClientRect();\n    var offsetX = box.left + window.pageXOffset;\n    var offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  };\n  /**\n   * Set the positioning for this overlay.\n   * @param {import(\"./OverlayPositioning.js\").default} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setPositioning = function (positioning) {\n    this.set(Property.POSITIONING, positioning);\n  };\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  Overlay.prototype.setVisible = function (visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  };\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  Overlay.prototype.updatePixelPosition = function () {\n    var map = this.getMap();\n    var position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n    var pixel = map.getPixelFromCoordinate(position);\n    var mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  };\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n    var style = this.element.style;\n    var offset = this.getOffset();\n    var positioning = this.getPositioning();\n    this.setVisible(true);\n    var x = Math.round(pixel[0] + offset[0]) + 'px';\n    var y = Math.round(pixel[1] + offset[1]) + 'px';\n    var posX = '0%';\n    var posY = '0%';\n    if (positioning == OverlayPositioning.BOTTOM_RIGHT || positioning == OverlayPositioning.CENTER_RIGHT || positioning == OverlayPositioning.TOP_RIGHT) {\n      posX = '-100%';\n    } else if (positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.TOP_CENTER) {\n      posX = '-50%';\n    }\n    if (positioning == OverlayPositioning.BOTTOM_LEFT || positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.BOTTOM_RIGHT) {\n      posY = '-100%';\n    } else if (positioning == OverlayPositioning.CENTER_LEFT || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.CENTER_RIGHT) {\n      posY = '-50%';\n    }\n    var transform = \"translate(\" + posX + \", \" + posY + \") translate(\" + x + \", \" + y + \")\";\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n      // @ts-ignore IE9\n      style.msTransform = transform;\n    }\n  };\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  Overlay.prototype.getOptions = function () {\n    return this.options;\n  };\n  return Overlay;\n}(BaseObject);\nexport default Overlay;\n"],
  "mappings": "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",
  "names": ["d", "b", "Overlay"]
}
