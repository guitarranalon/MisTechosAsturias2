{
  "version": 3,
  "sources": ["../../../../../../node_modules/@datorama/akita/src/lib/actions.js", "../../../../../../node_modules/@datorama/akita/src/lib/hasEntity.js", "../../../../../../node_modules/@datorama/akita/src/lib/isArray.js", "../../../../../../node_modules/@datorama/akita/src/lib/activeState.js", "../../../../../../node_modules/@datorama/akita/src/lib/addEntities.js", "../../../../../../node_modules/@datorama/akita/src/lib/isNil.js", "../../../../../../node_modules/@datorama/akita/src/lib/coerceArray.js", "../../../../../../node_modules/@datorama/akita/src/lib/arrayAdd.js", "../../../../../../node_modules/@datorama/akita/src/lib/defaultIDKey.js", "../../../../../../node_modules/@datorama/akita/src/lib/isEmpty.js", "../../../../../../node_modules/@datorama/akita/src/lib/isFunction.js", "../../../../../../node_modules/@datorama/akita/src/lib/arrayFind.js", "../../../../../../node_modules/@datorama/akita/src/lib/isObject.js", "../../../../../../node_modules/@datorama/akita/src/lib/not.js", "../../../../../../node_modules/@datorama/akita/src/lib/arrayRemove.js", "../../../../../../node_modules/@datorama/akita/src/lib/arrayToggle.js", "../../../../../../node_modules/@datorama/akita/src/lib/arrayUpdate.js", "../../../../../../node_modules/@datorama/akita/src/lib/arrayUpsert.js", "../../../../../../node_modules/@datorama/akita/src/lib/cacheable.js", "../../../../../../node_modules/@datorama/akita/src/lib/combineQueries.js", "../../../../../../node_modules/@datorama/akita/src/lib/config.js", "../../../../../../node_modules/@datorama/akita/src/lib/isDefined.js", "../../../../../../node_modules/@datorama/akita/src/lib/dispatchers.js", "../../../../../../node_modules/@datorama/akita/src/lib/root.js", "../../../../../../node_modules/@datorama/akita/src/lib/stores.js", "../../../../../../node_modules/@datorama/akita/src/lib/capitalize.js", "../../../../../../node_modules/@datorama/akita/src/lib/devtools.js", "../../../../../../node_modules/@datorama/akita/src/lib/sort.js", "../../../../../../node_modules/@datorama/akita/src/lib/entitiesToArray.js", "../../../../../../node_modules/@datorama/akita/src/lib/entitiesToMap.js", "../../../../../../node_modules/@datorama/akita/src/lib/entityActions.js", "../../../../../../node_modules/@datorama/akita/src/lib/entityService.js", "../../../../../../node_modules/@datorama/akita/src/lib/env.js", "../../../../../../node_modules/@datorama/akita/src/lib/getActiveEntities.js", "../../../../../../node_modules/@datorama/akita/src/lib/getInitialEntitiesState.js", "../../../../../../node_modules/@datorama/akita/src/lib/isUndefined.js", "../../../../../../node_modules/@datorama/akita/src/lib/removeEntities.js", "../../../../../../node_modules/@datorama/akita/src/lib/toEntitiesObject.js", "../../../../../../node_modules/@datorama/akita/src/lib/setEntities.js", "../../../../../../node_modules/@datorama/akita/src/lib/deepFreeze.js", "../../../../../../node_modules/@datorama/akita/src/lib/errors.js", "../../../../../../node_modules/@datorama/akita/src/lib/toBoolean.js", "../../../../../../node_modules/@datorama/akita/src/lib/isPlainObject.js", "../../../../../../node_modules/@datorama/akita/src/lib/storeConfig.js", "../../../../../../node_modules/@datorama/akita/src/lib/transaction.js", "../../../../../../node_modules/@datorama/akita/src/lib/store.js", "../../../../../../node_modules/@datorama/akita/src/lib/updateEntities.js", "../../../../../../node_modules/@datorama/akita/src/lib/entityStore.js", "../../../../../../node_modules/@datorama/akita/src/lib/filterNil.js", "../../../../../../node_modules/@datorama/akita/src/lib/compareKeys.js", "../../../../../../node_modules/@datorama/akita/src/lib/isString.js", "../../../../../../node_modules/@datorama/akita/src/lib/queryConfig.js", "../../../../../../node_modules/@datorama/akita/src/lib/query.js", "../../../../../../node_modules/@datorama/akita/src/lib/getEntity.js", "../../../../../../node_modules/@datorama/akita/src/lib/mapSkipUndefined.js", "../../../../../../node_modules/@datorama/akita/src/lib/sortByOptions.js", "../../../../../../node_modules/@datorama/akita/src/lib/queryEntity.js", "../../../../../../node_modules/@datorama/akita/src/lib/fp.js", "../../../../../../node_modules/@datorama/akita/src/lib/getValueByString.js", "../../../../../../node_modules/@datorama/akita/src/lib/guid.js", "../../../../../../node_modules/@datorama/akita/src/lib/isNumber.js", "../../../../../../node_modules/@datorama/akita/src/lib/setValueByString.js", "../../../../../../node_modules/@datorama/akita/src/lib/persistState.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/plugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/dirtyCheck/dirtyCheckPlugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/entityCollectionPlugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/dirtyCheck/entityDirtyCheckPlugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/paginator/paginatorPlugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/persistForm/persistNgFormPlugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/stateHistory/stateHistoryPlugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/plugins/stateHistory/entityStateHistoryPlugin.js", "../../../../../../node_modules/@datorama/akita/src/lib/resetStores.js", "../../../../../../node_modules/@datorama/akita/src/lib/runStoreAction.js", "../../../../../../node_modules/@datorama/akita/src/lib/setLoading.js", "../../../../../../node_modules/@datorama/akita/src/lib/setLoadingAndError.js", "../../../../../../node_modules/@datorama/akita/src/lib/snapshotManager.js", "../../../../../../node_modules/@datorama/akita/src/lib/toEntitiesIds.js", "../../../../../../node_modules/@datorama/akita/src/lib/trackIdChanges.js"],
  "sourcesContent": ["export const currentAction = {\n  type: null,\n  entityIds: null,\n  skip: false,\n  payload: null\n};\nlet customActionActive = false;\nexport function resetCustomAction() {\n  customActionActive = false;\n}\n// public API for custom actions. Custom action always wins\nexport function logAction(type, entityIds, payload) {\n  setAction(type, entityIds, payload);\n  customActionActive = true;\n}\nexport function setAction(type, entityIds, payload) {\n  if (customActionActive === false) {\n    currentAction.type = type;\n    currentAction.entityIds = entityIds;\n    currentAction.payload = payload;\n  }\n}\nexport function setSkipAction(skip = true) {\n  currentAction.skip = skip;\n}\nexport function action(action, entityIds) {\n  return function (target, propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n      logAction(action, entityIds);\n      return originalMethod.apply(this, args);\n    };\n    return descriptor;\n  };\n}\n", "// @internal\nexport function hasEntity(entities, id) {\n  return entities.hasOwnProperty(id);\n}\n", "// @internal\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n", "import { hasEntity } from './hasEntity';\nimport { isArray } from './isArray';\n// @internal\nexport function hasActiveState(state) {\n  return state.hasOwnProperty('active');\n}\n// @internal\nexport function isMultiActiveState(active) {\n  return isArray(active);\n}\n// @internal\nexport function resolveActiveEntity({\n  active,\n  ids,\n  entities\n}) {\n  if (isMultiActiveState(active)) {\n    return getExitingActives(active, ids);\n  }\n  if (hasEntity(entities, active) === false) {\n    return null;\n  }\n  return active;\n}\n// @internal\nexport function getExitingActives(currentActivesIds, newIds) {\n  const filtered = currentActivesIds.filter(id => newIds.indexOf(id) > -1);\n  /** Return the same reference if nothing has changed */\n  if (filtered.length === currentActivesIds.length) {\n    return currentActivesIds;\n  }\n  return filtered;\n}\n", "import { hasEntity } from './hasEntity';\n// @internal\nexport function addEntities({\n  state,\n  entities,\n  idKey,\n  options = {},\n  preAddEntity\n}) {\n  let newEntities = {};\n  let newIds = [];\n  let hasNewEntities = false;\n  for (const entity of entities) {\n    if (hasEntity(state.entities, entity[idKey]) === false) {\n      // evaluate the middleware first to support dynamic ids\n      const current = preAddEntity(entity);\n      const entityId = current[idKey];\n      newEntities[entityId] = current;\n      if (options.prepend) newIds.unshift(entityId);else newIds.push(entityId);\n      hasNewEntities = true;\n    }\n  }\n  return hasNewEntities ? {\n    newState: {\n      ...state,\n      entities: {\n        ...state.entities,\n        ...newEntities\n      },\n      ids: options.prepend ? [...newIds, ...state.ids] : [...state.ids, ...newIds]\n    },\n    newIds\n  } : null;\n}\n", "// @internal\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n", "import { isNil } from './isNil';\n// @internal\nexport function coerceArray(value) {\n  if (isNil(value)) {\n    return [];\n  }\n  return Array.isArray(value) ? value : [value];\n}\n", "import { coerceArray } from './coerceArray';\n/**\n * Add item to a collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   comments: arrayAdd(state.comments, { id: 2 })\n * }))\n *\n */\nexport function arrayAdd(arr, newEntity, options = {}) {\n  const newEntities = coerceArray(newEntity);\n  const toArr = arr || [];\n  return options.prepend ? [...newEntities, ...toArr] : [...toArr, ...newEntities];\n}\n", "export const DEFAULT_ID_KEY = 'id';\n", "import { isArray } from './isArray';\n// @internal\nexport function isEmpty(arr) {\n  if (isArray(arr)) {\n    return arr.length === 0;\n  }\n  return false;\n}\n", "// @internal\nexport function isFunction(value) {\n  return typeof value === 'function';\n}\n", "import { distinctUntilChanged, map } from 'rxjs';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { isArray } from './isArray';\nimport { isEmpty } from './isEmpty';\nimport { isFunction } from './isFunction';\n// @internal\nexport function find(collection, idsOrPredicate, idKey) {\n  const result = [];\n  if (isFunction(idsOrPredicate)) {\n    for (const entity of collection) {\n      if (idsOrPredicate(entity) === true) {\n        result.push(entity);\n      }\n    }\n  } else {\n    const toSet = coerceArray(idsOrPredicate).reduce((acc, current) => acc.add(current), new Set());\n    for (const entity of collection) {\n      if (toSet.has(entity[idKey])) {\n        result.push(entity);\n      }\n    }\n  }\n  return result;\n}\n// @internal\nexport function distinctUntilArrayItemChanged() {\n  return distinctUntilChanged((prevCollection, currentCollection) => {\n    if (prevCollection === currentCollection) {\n      return true;\n    }\n    if (!isArray(prevCollection) || !isArray(currentCollection)) {\n      return false;\n    }\n    if (isEmpty(prevCollection) && isEmpty(currentCollection)) {\n      return true;\n    }\n    if (prevCollection.length !== currentCollection.length) {\n      return false;\n    }\n    const isOneOfItemReferenceChanged = currentCollection.some((item, i) => {\n      return prevCollection[i] !== item;\n    });\n    // return false means there is a change and we want to call next()\n    return isOneOfItemReferenceChanged === false;\n  });\n}\nexport function arrayFind(idsOrPredicate, idKey) {\n  return function (source) {\n    return source.pipe(map(collection => {\n      // which means the user deleted the root entity or set the collection to nil\n      if (isArray(collection) === false) {\n        return collection;\n      }\n      return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);\n    }), distinctUntilArrayItemChanged(), map(value => {\n      if (isArray(value) === false) {\n        return value;\n      }\n      if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {\n        return value;\n      }\n      return value[0];\n    }));\n  };\n}\n", "// @internal\nexport function isObject(value) {\n  const type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n", "// @internal\nexport function not(pred) {\n  return function (...args) {\n    return !pred(...args);\n  };\n}\n", "import { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isObject } from './isObject';\nimport { isFunction } from './isFunction';\nimport { not } from './not';\n/**\n * Remove item from collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   names: arrayRemove(state.names, ['one', 'second'])\n * }))\n */\nexport function arrayRemove(arr, identifier, idKey = DEFAULT_ID_KEY) {\n  let identifiers;\n  let filterFn;\n  if (isFunction(identifier)) {\n    filterFn = not(identifier);\n  } else {\n    identifiers = coerceArray(identifier);\n    filterFn = current => {\n      return identifiers.includes(isObject(current) ? current[idKey] : current) === false;\n    };\n  }\n  if (Array.isArray(arr)) {\n    return arr.filter(filterFn);\n  }\n}\n", "/**\n * Create an array value comparator for a specific key of the value.\n * @param prop The property of the value to be compared.\n */\nexport function byKey(prop) {\n  return (a, b) => a[prop] === b[prop];\n}\n/**\n * Create an array value comparator for the id field of an array value.\n */\nexport function byId() {\n  return byKey('id');\n}\n/**\n * Adds or removes a value from an array by comparing its values. If a matching value exists it is removed, otherwise\n * it is added to the array.\n *\n * @param array The array to modify.\n * @param newValue The new value to toggle.\n * @param compare A compare function to determine equality of array values. Default is an equality test by object identity.\n */\nexport function arrayToggle(array, newValue, compare = (a, b) => a === b) {\n  const index = array.findIndex(oldValue => compare(newValue, oldValue));\n  return !!~index ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array, newValue];\n}\n", "import { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { isFunction } from './isFunction';\nimport { isObject } from './isObject';\n/**\n * Update item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpdate(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpdate(arr, predicateOrIds, obj, idKey = DEFAULT_ID_KEY) {\n  let condition;\n  if (isFunction(predicateOrIds)) {\n    condition = predicateOrIds;\n  } else {\n    const ids = coerceArray(predicateOrIds);\n    condition = item => ids.includes(isObject(item) ? item[idKey] : item) === true;\n  }\n  const updateFn = state => state.map((entity, index) => {\n    if (condition(entity, index) === true) {\n      return isObject(entity) ? {\n        ...entity,\n        ...obj\n      } : obj;\n    }\n    return entity;\n  });\n  return updateFn(arr);\n}\n", "import { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { arrayAdd } from './arrayAdd';\nimport { arrayUpdate } from './arrayUpdate';\nimport { isObject } from './isObject';\n/**\n * Upsert item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpsert(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpsert(arr, id, obj, idKey = DEFAULT_ID_KEY) {\n  const entityIsObject = isObject(obj);\n  const entityExists = arr.some(entity => entityIsObject ? entity[idKey] === id : entity === id);\n  if (entityExists) {\n    return arrayUpdate(arr, id, obj, idKey);\n  } else {\n    return arrayAdd(arr, entityIsObject ? {\n      ...obj,\n      [idKey]: id\n    } : obj);\n  }\n}\n", "import { EMPTY, of } from 'rxjs';\n/**\n *\n * Helper function for checking if we have data in cache\n *\n * export class ProductsService {\n *   constructor(private productsStore: ProductsStore) {}\n\n *   get(): Observable<void> {\n *     const request = this.http.get().pipe(\n *       tap(this.productsStore.set(response))\n *     );\n *\n *     return cacheable(this.productsStore, request);\n *   }\n * }\n */\nexport function cacheable(store, request$, options = {\n  emitNext: false\n}) {\n  if (store._cache().value) {\n    return options.emitNext ? of(undefined) : EMPTY;\n  }\n  return request$;\n}\n", "import { auditTime, combineLatest } from 'rxjs';\nexport function combineQueries(observables) {\n  return combineLatest(observables).pipe(auditTime(0));\n}\n", "let CONFIG = {\n  resettable: false,\n  ttl: null,\n  producerFn: undefined\n};\nexport function akitaConfig(config) {\n  CONFIG = {\n    ...CONFIG,\n    ...config\n  };\n}\n// @internal\nexport function getAkitaConfig() {\n  return CONFIG;\n}\nexport function getGlobalProducerFn() {\n  return CONFIG.producerFn;\n}\n", "import { isNil } from './isNil';\n// @internal\nexport function isDefined(val) {\n  return isNil(val) === false;\n}\n", "import { ReplaySubject, Subject } from 'rxjs';\n// @internal\nexport const $$deleteStore = new Subject();\n// @internal\nexport const $$addStore = new ReplaySubject(50, 5000);\n// @internal\nexport const $$updateStore = new Subject();\n// @internal\nexport function dispatchDeleted(storeName) {\n  $$deleteStore.next(storeName);\n}\n// @internal\nexport function dispatchAdded(storeName) {\n  $$addStore.next(storeName);\n}\n// @internal\nexport function dispatchUpdate(storeName, action) {\n  $$updateStore.next({\n    storeName,\n    action\n  });\n}\n", "export const isBrowser = typeof window !== 'undefined';\nexport const isNotBrowser = !isBrowser;\n// export const isNativeScript = typeof global !== 'undefined' && (<any>global).__runtimeVersion !== 'undefined'; TODO is this used?\nexport const hasLocalStorage = () => {\n  try {\n    return typeof localStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n};\nexport const hasSessionStorage = () => {\n  try {\n    return typeof sessionStorage !== 'undefined';\n  } catch {\n    return false;\n  }\n};\n", "import { isBrowser } from './root';\n// @internal\nexport const __stores__ = {};\n// @internal\nexport const __queries__ = {};\nif (isBrowser) {\n  window.$$stores = __stores__;\n  window.$$queries = __queries__;\n}\n", "// @internal\nexport function capitalize(value) {\n  return value && value.charAt(0).toUpperCase() + value.slice(1);\n}\n", "import { setSkipAction } from './actions';\nimport { isDefined } from './isDefined';\nimport { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';\nimport { __stores__ } from './stores';\nimport { capitalize } from './capitalize';\nimport { isNotBrowser } from './root';\nlet subs = [];\nexport function akitaDevtools(ngZoneOrOptions, options = {}) {\n  if (isNotBrowser) return;\n  if (!window.__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n  subs.length && subs.forEach(s => {\n    if (s.unsubscribe) {\n      s.unsubscribe();\n    } else {\n      s && s();\n    }\n  });\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    ngZoneOrOptions.run = cb => cb();\n    options = ngZoneOrOptions;\n  }\n  const defaultOptions = {\n    name: 'Akita',\n    shallow: true,\n    storesWhitelist: []\n  };\n  const merged = Object.assign({}, defaultOptions, options);\n  const storesWhitelist = merged.storesWhitelist;\n  const devTools = window.__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n  const isAllowed = storeName => {\n    if (!storesWhitelist.length) {\n      return true;\n    }\n    return storesWhitelist.indexOf(storeName) > -1;\n  };\n  subs.push($$addStore.subscribe(storeName => {\n    if (isAllowed(storeName) === false) return;\n    appState = {\n      ...appState,\n      [storeName]: __stores__[storeName]._value()\n    };\n    devTools.send({\n      type: `[${capitalize(storeName)}] - @@INIT`\n    }, appState);\n  }));\n  subs.push($$deleteStore.subscribe(storeName => {\n    if (isAllowed(storeName) === false) return;\n    delete appState[storeName];\n    devTools.send({\n      type: `[${storeName}] - Delete Store`\n    }, appState);\n  }));\n  subs.push($$updateStore.subscribe(({\n    storeName,\n    action\n  }) => {\n    if (isAllowed(storeName) === false) return;\n    const {\n      type,\n      entityIds,\n      skip,\n      ...rest\n    } = action;\n    const payload = rest.payload;\n    if (skip) {\n      setSkipAction(false);\n      return;\n    }\n    const store = __stores__[storeName];\n    if (!store) {\n      return;\n    }\n    if (options.shallow === false && appState[storeName]) {\n      const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);\n      if (isEqual) return;\n    }\n    appState = {\n      ...appState,\n      [storeName]: store._value()\n    };\n    const normalize = capitalize(storeName);\n    let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;\n    if (options.logTrace) {\n      console.group(msg);\n      console.trace();\n      console.groupEnd();\n    }\n    if (options.sortAlphabetically) {\n      const sortedAppState = Object.keys(appState).sort().reduce((acc, storeName) => {\n        acc[storeName] = appState[storeName];\n        return acc;\n      }, {});\n      devTools.send({\n        type: msg,\n        ...payload\n      }, sortedAppState);\n      return;\n    }\n    devTools.send({\n      type: msg,\n      ...payload\n    }, appState);\n  }));\n  subs.push(devTools.subscribe(message => {\n    if (message.type === 'DISPATCH') {\n      const payloadType = message.payload.type;\n      if (payloadType === 'COMMIT') {\n        devTools.init(appState);\n        return;\n      }\n      if (message.state) {\n        const rootState = JSON.parse(message.state);\n        for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n          const storeName = keys[i];\n          if (__stores__[storeName]) {\n            ngZoneOrOptions.run(() => {\n              __stores__[storeName]._setState(() => rootState[storeName], false);\n            });\n          }\n        }\n      }\n    }\n  }));\n}\n", "export var Order;\n(function (Order) {\n  Order[\"ASC\"] = \"asc\";\n  Order[\"DESC\"] = \"desc\";\n})(Order || (Order = {}));\n// @internal\nexport function compareValues(key, order = Order.ASC) {\n  return function (a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n", "import { isFunction } from './isFunction';\nimport { compareValues } from './sort';\nimport { coerceArray } from './coerceArray';\n// @internal\nexport function entitiesToArray(state, options) {\n  let arr = [];\n  const {\n    ids,\n    entities\n  } = state;\n  const {\n    filterBy,\n    limitTo,\n    sortBy,\n    sortByOrder\n  } = options;\n  for (let i = 0; i < ids.length; i++) {\n    const entity = entities[ids[i]];\n    if (!filterBy) {\n      arr.push(entity);\n      continue;\n    }\n    const toArray = coerceArray(filterBy);\n    const allPass = toArray.every(fn => fn(entity, i));\n    if (allPass) {\n      arr.push(entity);\n    }\n  }\n  if (sortBy) {\n    let _sortBy = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n  const length = Math.min(limitTo || arr.length, arr.length);\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n", "import { isNil } from './isNil';\nimport { coerceArray } from './coerceArray';\n// @internal\nexport function entitiesToMap(state, options) {\n  const map = {};\n  const {\n    filterBy,\n    limitTo\n  } = options;\n  const {\n    ids,\n    entities\n  } = state;\n  if (!filterBy && !limitTo) {\n    return entities;\n  }\n  const hasLimit = isNil(limitTo) === false;\n  if (filterBy && hasLimit) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      const entity = entities[id];\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n        count++;\n      }\n    }\n  } else {\n    const finalLength = Math.min(limitTo || ids.length, ids.length);\n    for (let i = 0; i < finalLength; i++) {\n      const id = ids[i];\n      const entity = entities[id];\n      if (!filterBy) {\n        map[id] = entity;\n        continue;\n      }\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n      }\n    }\n  }\n  return map;\n}\n", "export var EntityActions;\n(function (EntityActions) {\n  EntityActions[\"Set\"] = \"Set\";\n  EntityActions[\"Add\"] = \"Add\";\n  EntityActions[\"Update\"] = \"Update\";\n  EntityActions[\"Remove\"] = \"Remove\";\n})(EntityActions || (EntityActions = {}));\n", "export class EntityService {}\n", "import { isBrowser } from './root';\nexport let __DEV__ = true;\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n  if (isBrowser) {\n    delete window.$$stores;\n    delete window.$$queries;\n  }\n}\n// @internal\nexport function isDev() {\n  return __DEV__;\n}\n", "import { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n// @internal\nexport function getActiveEntities(idOrOptions, ids, currentActive) {\n  let result;\n  if (isArray(idOrOptions)) {\n    result = idOrOptions;\n  } else {\n    if (isObject(idOrOptions)) {\n      if (isNil(currentActive)) return;\n      idOrOptions = Object.assign({\n        wrap: true\n      }, idOrOptions);\n      const currentIdIndex = ids.indexOf(currentActive);\n      if (idOrOptions.prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !idOrOptions.wrap) return;\n        result = isFirst ? ids[ids.length - 1] : ids[currentIdIndex - 1];\n      } else if (idOrOptions.next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !idOrOptions.wrap) return;\n        result = isLast ? ids[0] : ids[currentIdIndex + 1];\n      }\n    } else {\n      if (idOrOptions === currentActive) return;\n      result = idOrOptions;\n    }\n  }\n  return result;\n}\n", "// @internal\nexport const getInitialEntitiesState = () => ({\n  entities: {},\n  ids: [],\n  loading: true,\n  error: null\n});\n", "// @internal\nexport function isUndefined(value) {\n  return value === undefined;\n}\n", "import { isNil } from './isNil';\nimport { hasActiveState, isMultiActiveState, resolveActiveEntity } from './activeState';\n// @internal\nexport function removeEntities({\n  state,\n  ids\n}) {\n  if (isNil(ids)) return removeAllEntities(state);\n  const entities = state.entities;\n  let newEntities = {};\n  for (const id of state.ids) {\n    if (ids.includes(id) === false) {\n      newEntities[id] = entities[id];\n    }\n  }\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: state.ids.filter(current => ids.includes(current) === false)\n  };\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n  return newState;\n}\n// @internal\nexport function removeAllEntities(state) {\n  return {\n    ...state,\n    entities: {},\n    ids: [],\n    active: isMultiActiveState(state.active) ? [] : null\n  };\n}\n", "// @internal\nexport function toEntitiesObject(entities, idKey, preAddEntity) {\n  const acc = {\n    entities: {},\n    ids: []\n  };\n  for (const entity of entities) {\n    // evaluate the middleware first to support dynamic ids\n    const current = preAddEntity(entity);\n    acc.entities[current[idKey]] = current;\n    acc.ids.push(current[idKey]);\n  }\n  return acc;\n}\n", "import { toEntitiesObject } from './toEntitiesObject';\nimport { isArray } from './isArray';\nimport { hasActiveState, resolveActiveEntity } from './activeState';\n// @internal\nexport function isEntityState(state) {\n  return state.entities && state.ids;\n}\n// @internal\nfunction applyMiddleware(entities, preAddEntity) {\n  let mapped = {};\n  for (const id of Object.keys(entities)) {\n    mapped[id] = preAddEntity(entities[id]);\n  }\n  return mapped;\n}\n// @internal\nexport function setEntities({\n  state,\n  entities,\n  idKey,\n  preAddEntity,\n  isNativePreAdd\n}) {\n  let newEntities;\n  let newIds;\n  if (isArray(entities)) {\n    const resolve = toEntitiesObject(entities, idKey, preAddEntity);\n    newEntities = resolve.entities;\n    newIds = resolve.ids;\n  } else if (isEntityState(entities)) {\n    newEntities = isNativePreAdd ? entities.entities : applyMiddleware(entities.entities, preAddEntity);\n    newIds = entities.ids;\n  } else {\n    // it's an object\n    newEntities = isNativePreAdd ? entities : applyMiddleware(entities, preAddEntity);\n    newIds = Object.keys(newEntities).map(id => isNaN(id) ? id : Number(id));\n  }\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: newIds,\n    loading: false\n  };\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n  return newState;\n}\n", "// @internal\nexport function deepFreeze(o) {\n  Object.freeze(o);\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (hasOwnProp.call(o, prop) && (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\n", "// @internal\nexport class AkitaError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\n// @internal\nexport function assertStoreHasName(name, className) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n", "// @internal\nexport function toBoolean(value) {\n  return value != null && `${value}` !== 'false';\n}\n", "import { toBoolean } from './toBoolean';\n// @internal\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n", "export const configKey = 'akitaConfig';\nexport function StoreConfig(metadata) {\n  return function (constructor) {\n    constructor[configKey] = {\n      idKey: 'id'\n    };\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n", "import { BehaviorSubject, of, Subject, tap } from 'rxjs';\nimport { logAction } from './actions';\n// @internal\nconst transactionFinished = new Subject();\n// @internal\nconst transactionInProcess = new BehaviorSubject(false);\n// @internal\nexport const transactionManager = {\n  activeTransactions: 0,\n  batchTransaction: null\n};\n// @internal\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    transactionManager.batchTransaction = new Subject();\n  }\n  transactionManager.activeTransactions++;\n  transactionInProcess.next(true);\n}\n// @internal\nexport function endBatch() {\n  if (--transactionManager.activeTransactions === 0) {\n    transactionManager.batchTransaction.next(true);\n    transactionManager.batchTransaction.complete();\n    transactionInProcess.next(false);\n    transactionFinished.next(true);\n  }\n}\n// @internal\nexport function isTransactionInProcess() {\n  return transactionManager.activeTransactions > 0;\n}\n// @internal\nexport function commit() {\n  return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);\n}\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction(action, thisArg = undefined) {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    logAction('@Transaction');\n    endBatch();\n  }\n}\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function (target, propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n    return descriptor;\n  };\n}\n/**\n *\n * RxJS custom operator that wraps the callback inside transaction\n *\n * @example\n *\n * return http.get().pipe(\n *    withTransaction(response > {\n *      store.setActive(1);\n *      store.update();\n *      store.updateEntity(1, {});\n *    })\n * )\n *\n */\nexport function withTransaction(next) {\n  return function (source) {\n    return source.pipe(tap(value => applyTransaction(() => next(value))));\n  };\n}\n", "import { BehaviorSubject, distinctUntilChanged, map } from 'rxjs';\nimport { currentAction, resetCustomAction, setAction } from './actions';\nimport { getAkitaConfig, getGlobalProducerFn } from './config';\nimport { deepFreeze } from './deepFreeze';\nimport { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';\nimport { isDev, __DEV__ } from './env';\nimport { assertStoreHasName } from './errors';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isPlainObject } from './isPlainObject';\nimport { isBrowser } from './root';\nimport { configKey } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { commit, isTransactionInProcess } from './transaction';\n/**\n *\n * Store for managing any type of data\n *\n * @example\n *\n * export interface SessionState {\n *   token: string;\n *   userDetails: UserDetails\n * }\n *\n * export function createInitialState(): SessionState {\n *  return {\n *    token: '',\n *    userDetails: null\n *  };\n * }\n *\n * @StoreConfig({ name: 'session' })\n * export class SessionStore extends Store<SessionState> {\n *   constructor() {\n *    super(createInitialState());\n *   }\n * }\n */\nexport class Store {\n  constructor(initialState, options = {}) {\n    this.options = options;\n    this.inTransaction = false;\n    this.cache = {\n      active: new BehaviorSubject(false),\n      ttl: null\n    };\n    this.onInit(initialState);\n  }\n  /**\n   *  Set the loading state\n   *\n   *  @example\n   *\n   *  store.setLoading(true)\n   *\n   */\n  setLoading(loading = false) {\n    if (loading !== this._value().loading) {\n      isDev() && setAction('Set Loading');\n      this._setState(state => ({\n        ...state,\n        loading\n      }));\n    }\n  }\n  /**\n   *\n   * Set whether the data is cached\n   *\n   * @example\n   *\n   * store.setHasCache(true)\n   * store.setHasCache(false)\n   * store.setHasCache(true, { restartTTL: true })\n   *\n   */\n  setHasCache(hasCache, options = {\n    restartTTL: false\n  }) {\n    if (hasCache !== this.cache.active.value) {\n      this.cache.active.next(hasCache);\n    }\n    if (options.restartTTL) {\n      const ttlConfig = this.getCacheTTL();\n      if (ttlConfig) {\n        if (this.cache.ttl !== null) {\n          clearTimeout(this.cache.ttl);\n        }\n        this.cache.ttl = setTimeout(() => this.setHasCache(false), ttlConfig);\n      }\n    }\n  }\n  /**\n   *\n   * Sometimes we need to access the store value from a store\n   *\n   * @example middleware\n   *\n   */\n  getValue() {\n    return this.storeValue;\n  }\n  /**\n   *  Set the error state\n   *\n   *  @example\n   *\n   *  store.setError({text: 'unable to load data' })\n   *\n   */\n  setError(error) {\n    if (error !== this._value().error) {\n      isDev() && setAction('Set Error');\n      this._setState(state => ({\n        ...state,\n        error\n      }));\n    }\n  }\n  // @internal\n  _select(project) {\n    return this.store.asObservable().pipe(map(snapshot => project(snapshot.state)), distinctUntilChanged());\n  }\n  // @internal\n  _value() {\n    return this.storeValue;\n  }\n  // @internal\n  _cache() {\n    return this.cache.active;\n  }\n  // @internal\n  get config() {\n    return this.constructor[configKey] || {};\n  }\n  // @internal\n  get storeName() {\n    return this.config.storeName || this.options.storeName || this.options.name;\n  }\n  // @internal\n  get deepFreeze() {\n    return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;\n  }\n  // @internal\n  get cacheConfig() {\n    return this.config.cache || this.options.cache;\n  }\n  get _producerFn() {\n    return this.config.producerFn || this.options.producerFn || getGlobalProducerFn();\n  }\n  // @internal\n  get resettable() {\n    return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;\n  }\n  // @internal\n  _setState(newState, _dispatchAction = true) {\n    if (isFunction(newState)) {\n      const _newState = newState(this._value());\n      this.storeValue = __DEV__ ? this.deepFreeze(_newState) : _newState;\n    } else {\n      this.storeValue = newState;\n    }\n    if (!this.store) {\n      this.store = new BehaviorSubject({\n        state: this.storeValue\n      });\n      if (isDev()) {\n        this.store.subscribe(({\n          action\n        }) => {\n          if (action) {\n            dispatchUpdate(this.storeName, action);\n          }\n        });\n      }\n      return;\n    }\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n    this.dispatch(this.storeValue, _dispatchAction);\n  }\n  /**\n   *\n   * Reset the current store back to the initial value\n   *\n   * @example\n   *\n   * store.reset()\n   *\n   */\n  reset() {\n    if (this.isResettable()) {\n      isDev() && setAction('Reset');\n      this._setState(() => Object.assign({}, this._initialState));\n      this.setHasCache(false);\n    }\n  }\n  update(stateOrCallback) {\n    isDev() && setAction('Update');\n    let newState;\n    const currentState = this._value();\n    if (isFunction(stateOrCallback)) {\n      newState = isFunction(this._producerFn) ? this._producerFn(currentState, stateOrCallback) : stateOrCallback(currentState);\n    } else {\n      newState = stateOrCallback;\n    }\n    const withHook = this.akitaPreUpdate(currentState, {\n      ...currentState,\n      ...newState\n    });\n    const resolved = isPlainObject(currentState) ? withHook : new currentState.constructor(withHook);\n    this._setState(resolved);\n  }\n  updateStoreConfig(newOptions) {\n    this.options = {\n      ...this.options,\n      ...newOptions\n    };\n  }\n  // @internal\n  akitaPreUpdate(_, nextState) {\n    return nextState;\n  }\n  /**\n   *\n   * Destroy the store\n   *\n   * @example\n   *\n   * store.destroy()\n   *\n   */\n  destroy() {\n    const hmrEnabled = isBrowser ? window.hmrEnabled : false;\n    if (!hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      dispatchDeleted(this.storeName);\n      this.setHasCache(false);\n      this.cache.active.complete();\n      this.store.complete();\n    }\n  }\n  onInit(initialState) {\n    __stores__[this.storeName] = this;\n    this._setState(() => initialState);\n    dispatchAdded(this.storeName);\n    if (this.isResettable()) {\n      this._initialState = initialState;\n    }\n    isDev() && assertStoreHasName(this.storeName, this.constructor.name);\n  }\n  dispatch(state, _dispatchAction = true) {\n    let action = undefined;\n    if (_dispatchAction) {\n      action = currentAction;\n      resetCustomAction();\n    }\n    this.store.next({\n      state,\n      action\n    });\n  }\n  watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      this.dispatch(this._value());\n    });\n  }\n  isResettable() {\n    if (this.resettable === false) {\n      return false;\n    }\n    return this.resettable || getAkitaConfig().resettable;\n  }\n  handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n  getCacheTTL() {\n    return this.cacheConfig && this.cacheConfig.ttl || getAkitaConfig().ttl;\n  }\n}\n", "import { isFunction } from './isFunction';\nimport { hasEntity } from './hasEntity';\nimport { isPlainObject } from './isPlainObject';\n// @internal\nexport function updateEntities({\n  state,\n  ids,\n  idKey,\n  newStateOrFn,\n  preUpdateEntity,\n  producerFn,\n  onEntityIdChanges\n}) {\n  const updatedEntities = {};\n  let isUpdatingIdKey = false;\n  let idToUpdate;\n  for (const id of ids) {\n    // if the entity doesn't exist don't do anything\n    if (hasEntity(state.entities, id) === false) {\n      continue;\n    }\n    const oldEntity = state.entities[id];\n    let newState;\n    if (isFunction(newStateOrFn)) {\n      newState = isFunction(producerFn) ? producerFn(oldEntity, newStateOrFn) : newStateOrFn(oldEntity);\n    } else {\n      newState = newStateOrFn;\n    }\n    const isIdChanged = newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey];\n    let newEntity;\n    idToUpdate = id;\n    if (isIdChanged) {\n      isUpdatingIdKey = true;\n      idToUpdate = newState[idKey];\n    }\n    const merged = {\n      ...oldEntity,\n      ...newState\n    };\n    if (isPlainObject(oldEntity)) {\n      newEntity = merged;\n    } else {\n      /**\n       * In case that new state is class of it's own, there's\n       * a possibility that it will be different than the old\n       * class.\n       * For example, Old state is an instance of animal class\n       * and new state is instance of person class.\n       * To avoid run over new person class with the old animal\n       * class we check if the new state is a class of it's own.\n       * If so, use it. Otherwise, use the old state class\n       */\n      if (isPlainObject(newState)) {\n        newEntity = new oldEntity.constructor(merged);\n      } else {\n        newEntity = new newState.constructor(merged);\n      }\n    }\n    updatedEntities[idToUpdate] = preUpdateEntity(oldEntity, newEntity);\n  }\n  let updatedIds = state.ids;\n  let stateEntities = state.entities;\n  if (isUpdatingIdKey) {\n    const [id] = ids;\n    const {\n      [id]: deletedEntity,\n      ...rest\n    } = state.entities;\n    stateEntities = rest;\n    updatedIds = state.ids.map(current => current === id ? idToUpdate : current);\n    onEntityIdChanges(id, idToUpdate);\n  }\n  return {\n    ...state,\n    entities: {\n      ...stateEntities,\n      ...updatedEntities\n    },\n    ids: updatedIds\n  };\n}\n", "var _a, _b;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Subject } from 'rxjs';\nimport { logAction, setAction } from './actions';\nimport { addEntities } from './addEntities';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { EntityActions } from './entityActions';\nimport { isDev } from './env';\nimport { getActiveEntities } from './getActiveEntities';\nimport { getInitialEntitiesState } from './getInitialEntitiesState';\nimport { hasEntity } from './hasEntity';\nimport { isDefined } from './isDefined';\nimport { isEmpty } from './isEmpty';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isUndefined } from './isUndefined';\nimport { removeEntities } from './removeEntities';\nimport { setEntities } from './setEntities';\nimport { Store } from './store';\nimport { transaction } from './transaction';\nimport { updateEntities } from './updateEntities';\n/**\n *\n * Store for managing a collection of entities\n *\n * @example\n *\n * export interface WidgetsState extends EntityState<Widget> { }\n *\n * @StoreConfig({ name: 'widgets' })\n *  export class WidgetsStore extends EntityStore<WidgetsState> {\n *   constructor() {\n *     super();\n *   }\n * }\n *\n *\n */\nexport class EntityStore extends Store {\n  constructor(initialState = {}, options = {}) {\n    super({\n      ...getInitialEntitiesState(),\n      ...initialState\n    }, options);\n    this.options = options;\n    this.entityActions = new Subject();\n    this.entityIdChanges = new Subject();\n  }\n  // @internal\n  get selectEntityAction$() {\n    return this.entityActions.asObservable();\n  }\n  // @internal\n  get selectEntityIdChanges$() {\n    return this.entityIdChanges.asObservable();\n  }\n  // @internal\n  get idKey() {\n    return this.config.idKey || this.options.idKey || DEFAULT_ID_KEY;\n  }\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   *\n   * this.store.set([Entity, Entity])\n   * this.store.set({ids: [], entities: {}})\n   * this.store.set({ 1: {}, 2: {}})\n   *\n   */\n  set(entities, options = {}) {\n    if (isNil(entities)) return;\n    isDev() && setAction('Set Entity');\n    const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;\n    this.setHasCache(true, {\n      restartTTL: true\n    });\n    this._setState(state => {\n      const newState = setEntities({\n        state,\n        entities,\n        idKey: this.idKey,\n        preAddEntity: this.akitaPreAddEntity.bind(this),\n        isNativePreAdd\n      });\n      if (isUndefined(options.activeId) === false) {\n        newState.active = options.activeId;\n      }\n      return newState;\n    });\n    if (this.hasInitialUIState()) {\n      this.handleUICreation();\n    }\n    this.entityActions.next({\n      type: EntityActions.Set,\n      ids: this.ids\n    });\n  }\n  /**\n   * Add entities\n   *\n   * @example\n   *\n   * this.store.add([Entity, Entity])\n   * this.store.add(Entity)\n   * this.store.add(Entity, { prepend: true })\n   *\n   * this.store.add(Entity, { loading: false })\n   */\n  add(entities, options = {\n    loading: false\n  }) {\n    const collection = coerceArray(entities);\n    if (isEmpty(collection)) return;\n    const data = addEntities({\n      state: this._value(),\n      preAddEntity: this.akitaPreAddEntity.bind(this),\n      entities: collection,\n      idKey: this.idKey,\n      options\n    });\n    if (data) {\n      isDev() && setAction('Add Entity');\n      data.newState.loading = options.loading;\n      this._setState(() => data.newState);\n      if (this.hasInitialUIState()) {\n        this.handleUICreation(true);\n      }\n      this.entityActions.next({\n        type: EntityActions.Add,\n        ids: data.newIds\n      });\n    }\n  }\n  update(idsOrFnOrState, newStateOrFn) {\n    if (isUndefined(newStateOrFn)) {\n      super.update(idsOrFnOrState);\n      return;\n    }\n    let ids = [];\n    if (isFunction(idsOrFnOrState)) {\n      // We need to filter according the predicate function\n      ids = this.ids.filter(id => idsOrFnOrState(this.entities[id]));\n    } else {\n      // If it's nil we want all of them\n      ids = isNil(idsOrFnOrState) ? this.ids : coerceArray(idsOrFnOrState);\n    }\n    if (isEmpty(ids)) return;\n    isDev() && setAction('Update Entity', ids);\n    let entityIdChanged;\n    this._setState(state => updateEntities({\n      idKey: this.idKey,\n      ids,\n      preUpdateEntity: this.akitaPreUpdateEntity.bind(this),\n      state,\n      newStateOrFn,\n      producerFn: this._producerFn,\n      onEntityIdChanges: (oldId, newId) => {\n        entityIdChanged = {\n          oldId,\n          newId\n        };\n        this.entityIdChanges.next({\n          ...entityIdChanged,\n          pending: true\n        });\n      }\n    }));\n    if (entityIdChanged) {\n      this.entityIdChanges.next({\n        ...entityIdChanged,\n        pending: false\n      });\n    }\n    this.entityActions.next({\n      type: EntityActions.Update,\n      ids\n    });\n  }\n  upsert(ids, newState, onCreate, options = {}) {\n    const toArray = coerceArray(ids);\n    const predicate = isUpdate => id => hasEntity(this.entities, id) === isUpdate;\n    const baseClass = isFunction(onCreate) ? options.baseClass : onCreate ? onCreate.baseClass : undefined;\n    const isClassBased = isFunction(baseClass);\n    const updateIds = toArray.filter(predicate(true));\n    const newEntities = toArray.filter(predicate(false)).map(id => {\n      const newStateObj = typeof newState === 'function' ? newState({}) : newState;\n      const entity = isFunction(onCreate) ? onCreate(id, newStateObj) : newStateObj;\n      const withId = {\n        ...entity,\n        [this.idKey]: id\n      };\n      if (isClassBased) {\n        return new baseClass(withId);\n      }\n      return withId;\n    });\n    // it can be any of the three types\n    this.update(updateIds, newState);\n    this.add(newEntities);\n    isDev() && logAction('Upsert Entity');\n  }\n  /**\n   *\n   * Upsert entity collection (idKey must be present)\n   *\n   * @example\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }]);\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });\n   *\n   */\n  upsertMany(entities, options = {}) {\n    const addedIds = [];\n    const updatedIds = [];\n    const updatedEntities = {};\n    // Update the state directly to optimize performance\n    for (const entity of entities) {\n      const withPreCheckHook = this.akitaPreCheckEntity(entity);\n      const id = withPreCheckHook[this.idKey];\n      if (hasEntity(this.entities, id)) {\n        const prev = this._value().entities[id];\n        const merged = {\n          ...this._value().entities[id],\n          ...withPreCheckHook\n        };\n        const next = options.baseClass ? new options.baseClass(merged) : merged;\n        const withHook = this.akitaPreUpdateEntity(prev, next);\n        const nextId = withHook[this.idKey];\n        updatedEntities[nextId] = withHook;\n        updatedIds.push(nextId);\n      } else {\n        const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;\n        const withHook = this.akitaPreAddEntity(newEntity);\n        const nextId = withHook[this.idKey];\n        addedIds.push(nextId);\n        updatedEntities[nextId] = withHook;\n      }\n    }\n    isDev() && logAction('Upsert Many');\n    this._setState(state => ({\n      ...state,\n      ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids,\n      entities: {\n        ...state.entities,\n        ...updatedEntities\n      },\n      loading: !!options.loading\n    }));\n    updatedIds.length && this.entityActions.next({\n      type: EntityActions.Update,\n      ids: updatedIds\n    });\n    addedIds.length && this.entityActions.next({\n      type: EntityActions.Add,\n      ids: addedIds\n    });\n    if (addedIds.length && this.hasUIStore()) {\n      this.handleUICreation(true);\n    }\n  }\n  /**\n   *\n   * Replace one or more entities (except the id property)\n   *\n   *\n   * @example\n   *\n   * this.store.replace(5, newEntity)\n   * this.store.replace([1,2,3], newEntity)\n   */\n  replace(ids, newState) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const replaced = {};\n    for (const id of toArray) {\n      replaced[id] = {\n        ...newState,\n        [this.idKey]: id\n      };\n    }\n    isDev() && setAction('Replace Entity', ids);\n    this._setState(state => ({\n      ...state,\n      entities: {\n        ...state.entities,\n        ...replaced\n      }\n    }));\n  }\n  /**\n   *\n   * Move entity inside the collection\n   *\n   *\n   * @example\n   *\n   * this.store.move(fromIndex, toIndex)\n   */\n  move(from, to) {\n    const ids = this.ids.slice();\n    ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);\n    isDev() && setAction('Move Entity');\n    this._setState(state => ({\n      ...state,\n      // Change the entities reference so that selectAll emit\n      entities: {\n        ...state.entities\n      },\n      ids\n    }));\n  }\n  remove(idsOrFn) {\n    if (isEmpty(this.ids)) return;\n    const idPassed = isDefined(idsOrFn);\n    // null means remove all\n    let ids = [];\n    if (isFunction(idsOrFn)) {\n      ids = this.ids.filter(entityId => idsOrFn(this.entities[entityId]));\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : this.ids;\n    }\n    if (isEmpty(ids)) return;\n    isDev() && setAction('Remove Entity', ids);\n    this._setState(state => removeEntities({\n      state,\n      ids\n    }));\n    if (!idPassed) {\n      this.setHasCache(false);\n    }\n    this.handleUIRemove(ids);\n    this.entityActions.next({\n      type: EntityActions.Remove,\n      ids\n    });\n  }\n  /**\n   *\n   * Update the active entity\n   *\n   * @example\n   *\n   * this.store.updateActive({ completed: true })\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateOrCallback) {\n    const ids = coerceArray(this.active);\n    isDev() && setAction('Update Active', ids);\n    this.update(ids, newStateOrCallback);\n  }\n  setActive(idOrOptions) {\n    const active = getActiveEntities(idOrOptions, this.ids, this.active);\n    if (active === undefined) {\n      return;\n    }\n    isDev() && setAction('Set Active', active);\n    this._setActive(active);\n  }\n  /**\n   * Add active entities\n   *\n   * @example\n   *\n   * store.addActive(2);\n   * store.addActive([3, 4, 5]);\n   */\n  addActive(ids) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const everyExist = toArray.every(id => this.active.indexOf(id) > -1);\n    if (everyExist) return;\n    isDev() && setAction('Add Active', ids);\n    this._setState(state => {\n      /** Protect against case that one of the items in the array exist */\n      const uniques = Array.from(new Set([...state.active, ...toArray]));\n      return {\n        ...state,\n        active: uniques\n      };\n    });\n  }\n  /**\n   * Remove active entities\n   *\n   * @example\n   *\n   * store.removeActive(2)\n   * store.removeActive([3, 4, 5])\n   */\n  removeActive(ids) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const someExist = toArray.some(id => this.active.indexOf(id) > -1);\n    if (!someExist) return;\n    isDev() && setAction('Remove Active', ids);\n    this._setState(state => {\n      return {\n        ...state,\n        active: Array.isArray(state.active) ? state.active.filter(currentId => toArray.indexOf(currentId) === -1) : null\n      };\n    });\n  }\n  /**\n   * Toggle active entities\n   *\n   * @example\n   *\n   * store.toggle(2)\n   * store.toggle([3, 4, 5])\n   */\n  toggleActive(ids) {\n    const toArray = coerceArray(ids);\n    const filterExists = remove => id => this.active.includes(id) === remove;\n    const remove = toArray.filter(filterExists(true));\n    const add = toArray.filter(filterExists(false));\n    this.removeActive(remove);\n    this.addActive(add);\n    isDev() && logAction('Toggle Active');\n  }\n  /**\n   *\n   * Create sub UI store for managing Entity's UI state\n   *\n   * @example\n   *\n   * export type ProductUI = {\n   *   isLoading: boolean;\n   *   isOpen: boolean\n   * }\n   *\n   * interface ProductsUIState extends EntityState<ProductUI> {}\n   *\n   * export class ProductsStore EntityStore<ProductsState, Product> {\n   *   ui: EntityUIStore<ProductsUIState, ProductUI>;\n   *\n   *   constructor() {\n   *     super();\n   *     this.createUIStore();\n   *   }\n   *\n   * }\n   */\n  createUIStore(initialState = {}, storeConfig = {}) {\n    const defaults = {\n      name: `UI/${this.storeName}`,\n      idKey: this.idKey\n    };\n    this.ui = new EntityUIStore(initialState, {\n      ...defaults,\n      ...storeConfig\n    });\n    return this.ui;\n  }\n  // @internal\n  destroy() {\n    super.destroy();\n    if (this.ui instanceof EntityStore) {\n      this.ui.destroy();\n    }\n    this.entityActions.complete();\n  }\n  // @internal\n  akitaPreUpdateEntity(_, nextEntity) {\n    return nextEntity;\n  }\n  // @internal\n  akitaPreAddEntity(newEntity) {\n    return newEntity;\n  }\n  // @internal\n  akitaPreCheckEntity(newEntity) {\n    return newEntity;\n  }\n  get ids() {\n    return this._value().ids;\n  }\n  get entities() {\n    return this._value().entities;\n  }\n  get active() {\n    return this._value().active;\n  }\n  _setActive(ids) {\n    this._setState(state => {\n      return {\n        ...state,\n        active: ids\n      };\n    });\n  }\n  handleUICreation(add = false) {\n    const ids = this.ids;\n    const isFunc = isFunction(this.ui._akitaCreateEntityFn);\n    let uiEntities;\n    const createFn = id => {\n      const current = this.entities[id];\n      const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;\n      return {\n        [this.idKey]: current[this.idKey],\n        ...ui\n      };\n    };\n    if (add) {\n      uiEntities = this.ids.filter(id => isUndefined(this.ui.entities[id])).map(createFn);\n    } else {\n      uiEntities = ids.map(createFn);\n    }\n    add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);\n  }\n  hasInitialUIState() {\n    return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;\n  }\n  handleUIRemove(ids) {\n    if (this.hasUIStore()) {\n      this.ui.remove(ids);\n    }\n  }\n  hasUIStore() {\n    return this.ui instanceof EntityUIStore;\n  }\n}\n__decorate([transaction(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object, Object, Object]), __metadata(\"design:returntype\", void 0)], EntityStore.prototype, \"upsert\", null);\n__decorate([transaction(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [typeof (_b = typeof T !== \"undefined\" && T) === \"function\" ? _b : Object]), __metadata(\"design:returntype\", void 0)], EntityStore.prototype, \"toggleActive\", null);\n// @internal\nexport class EntityUIStore extends EntityStore {\n  constructor(initialState = {}, storeConfig = {}) {\n    super(initialState, storeConfig);\n  }\n  /**\n   *\n   * Set the initial UI entity state. This function will determine the entity's\n   * initial state when we call `set()` or `add()`.\n   *\n   * @example\n   *\n   * constructor() {\n   *   super();\n   *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));\n   *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });\n   * }\n   *\n   */\n  setInitialEntityState(createFn) {\n    this._akitaCreateEntityFn = createFn;\n  }\n}\n", "import { filter } from 'rxjs';\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNil)\n * @deprecated Use the operator function filterNilValue()\n */\nexport const filterNil = source => source.pipe(filter(value => value !== null && typeof value !== 'undefined'));\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNilValue())\n */\nexport function filterNilValue() {\n  return filter(value => value !== null && value !== undefined);\n}\n", "import { isFunction } from './isFunction';\nexport function compareKeys(keysOrFuncs) {\n  return function (prevState, currState) {\n    const isFns = isFunction(keysOrFuncs[0]);\n    // Return when they are NOT changed\n    return keysOrFuncs.some(keyOrFunc => {\n      if (isFns) {\n        return keyOrFunc(prevState) !== keyOrFunc(currState);\n      }\n      return prevState[keyOrFunc] !== currState[keyOrFunc];\n    }) === false;\n  };\n}\n", "// @internal\nexport function isString(value) {\n  return typeof value === 'string';\n}\n", "export const queryConfigKey = 'akitaQueryConfig';\nexport function QueryConfig(metadata) {\n  return function (constructor) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n", "import { distinctUntilChanged, map } from 'rxjs';\nimport { compareKeys } from './compareKeys';\nimport { isDev } from './env';\nimport { isFunction } from './isFunction';\nimport { isString } from './isString';\nimport { queryConfigKey } from './queryConfig';\nimport { __queries__ } from './stores';\nexport class Query {\n  constructor(store) {\n    this.store = store;\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n  select(project) {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store._select(state => state).pipe(distinctUntilChanged(compareKeys(project)), map(state => {\n        if (isFunction(project[0])) {\n          return project.map(func => func(state));\n        }\n        return project.reduce((acc, k) => {\n          acc[k] = state[k];\n          return acc;\n        }, {});\n      }));\n    } else {\n      mapFn = state => state;\n    }\n    return this.store._select(mapFn);\n  }\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => state.loading);\n  }\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError() {\n    return this.select(state => state.error);\n  }\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue() {\n    return this.store._value();\n  }\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache() {\n    return this.store._cache().asObservable();\n  }\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache() {\n    return this.store._cache().value;\n  }\n  // @internal\n  get config() {\n    return this.constructor[queryConfigKey];\n  }\n}\n", "import { isUndefined } from './isUndefined';\nimport { isString } from './isString';\n// @internal\nexport function findEntityByPredicate(predicate, entities) {\n  for (const entityId of Object.keys(entities)) {\n    if (predicate(entities[entityId]) === true) {\n      return entityId;\n    }\n  }\n  return undefined;\n}\n// @internal\nexport function getEntity(id, project) {\n  return function (entities) {\n    const entity = entities[id];\n    if (isUndefined(entity)) {\n      return undefined;\n    }\n    if (!project) {\n      return entity;\n    }\n    if (isString(project)) {\n      return entity[project];\n    }\n    return project(entity);\n  };\n}\n", "// @internal\nexport function mapSkipUndefined(arr, callbackFn) {\n  return arr.reduce((result, value, index, array) => {\n    const val = callbackFn(value, index, array);\n    if (val !== undefined) {\n      result.push(val);\n    }\n    return result;\n  }, []);\n}\n", "// @internal\nexport function sortByOptions(options, config) {\n  options.sortBy = options.sortBy || config && config.sortBy;\n  options.sortByOrder = options.sortByOrder || config && config.sortByOrder;\n}\n", "import { distinctUntilChanged, filter, map, of, switchMap } from 'rxjs';\nimport { distinctUntilArrayItemChanged } from './arrayFind';\nimport { coerceArray } from './coerceArray';\nimport { entitiesToArray } from './entitiesToArray';\nimport { entitiesToMap } from './entitiesToMap';\nimport { findEntityByPredicate, getEntity } from './getEntity';\nimport { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { mapSkipUndefined } from './mapSkipUndefined';\nimport { Query } from './query';\nimport { sortByOptions } from './sortByOptions';\nimport { toBoolean } from './toBoolean';\n/**\n *\n *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.\n *\n *  class WidgetsQuery extends QueryEntity<WidgetsState> {\n *     constructor(protected store: WidgetsStore) {\n *       super(store);\n *     }\n *  }\n *\n *\n *\n */\nexport class QueryEntity extends Query {\n  constructor(store, options = {}) {\n    super(store);\n    this.options = options;\n    this.__store__ = store;\n  }\n  selectAll(options = {\n    asObject: false\n  }) {\n    return this.select(state => state.entities).pipe(map(() => this.getAll(options)));\n  }\n  getAll(options = {\n    asObject: false,\n    filterBy: undefined,\n    limitTo: undefined\n  }) {\n    if (options.asObject) {\n      return entitiesToMap(this.getValue(), options);\n    }\n    sortByOptions(options, this.config || this.options);\n    return entitiesToArray(this.getValue(), options);\n  }\n  selectMany(ids, project) {\n    if (!ids || !ids.length) return of([]);\n    return this.select(state => state.entities).pipe(map(entities => mapSkipUndefined(ids, id => getEntity(id, project)(entities))), distinctUntilArrayItemChanged());\n  }\n  selectEntity(idOrPredicate, project) {\n    let id = idOrPredicate;\n    if (isFunction(idOrPredicate)) {\n      // For performance reason we expect the entity to be in the store\n      id = findEntityByPredicate(idOrPredicate, this.getValue().entities);\n    }\n    return this.select(state => state.entities).pipe(map(getEntity(id, project)), distinctUntilChanged());\n  }\n  /**\n   * Get an entity by id\n   *\n   * @example\n   *\n   * this.query.getEntity(1);\n   */\n  getEntity(id) {\n    return this.getValue().entities[id];\n  }\n  /**\n   * Select the active entity's id\n   *\n   * @example\n   *\n   * this.query.selectActiveId()\n   */\n  selectActiveId() {\n    return this.select(state => state.active);\n  }\n  /**\n   * Get the active id\n   *\n   * @example\n   *\n   * this.query.getActiveId()\n   */\n  getActiveId() {\n    return this.getValue().active;\n  }\n  selectActive(project) {\n    if (isArray(this.getActive())) {\n      return this.selectActiveId().pipe(switchMap(ids => this.selectMany(ids, project)));\n    }\n    return this.selectActiveId().pipe(switchMap(ids => this.selectEntity(ids, project)));\n  }\n  getActive() {\n    const activeId = this.getActiveId();\n    if (isArray(activeId)) {\n      return activeId.map(id => this.getValue().entities[id]);\n    }\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n  /**\n   * Select the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.selectCount()\n   * this.query.selectCount(entity => entity.completed)\n   */\n  selectCount(predicate) {\n    return this.select(state => state.entities).pipe(map(() => this.getCount(predicate)));\n  }\n  /**\n   * Get the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.getCount()\n   * this.query.getCount(entity => entity.completed)\n   */\n  getCount(predicate) {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getValue().ids.length;\n  }\n  selectLast(project) {\n    return this.selectAt(ids => ids[ids.length - 1], project);\n  }\n  selectFirst(project) {\n    return this.selectAt(ids => ids[0], project);\n  }\n  selectEntityAction(actionOrActions) {\n    if (isNil(actionOrActions)) {\n      return this.store.selectEntityAction$;\n    }\n    const project = isArray(actionOrActions) ? action => action : ({\n      ids\n    }) => ids;\n    const actions = coerceArray(actionOrActions);\n    return this.store.selectEntityAction$.pipe(filter(({\n      type\n    }) => actions.includes(type)), map(action => project(action)));\n  }\n  hasEntity(projectOrIds) {\n    if (isNil(projectOrIds)) {\n      return this.getValue().ids.length > 0;\n    }\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n    if (isArray(projectOrIds)) {\n      return projectOrIds.every(id => id in this.getValue().entities);\n    }\n    return projectOrIds in this.getValue().entities;\n  }\n  /**\n   * Returns whether entity store has an active entity\n   *\n   * @example\n   *\n   * this.query.hasActive()\n   * this.query.hasActive(3)\n   *\n   */\n  hasActive(id) {\n    const active = this.getValue().active;\n    const isIdProvided = isDefined(id);\n    if (Array.isArray(active)) {\n      if (isIdProvided) {\n        return active.includes(id);\n      }\n      return active.length > 0;\n    }\n    return isIdProvided ? active === id : isDefined(active);\n  }\n  /**\n   *\n   * Create sub UI query for querying Entity's UI state\n   *\n   * @example\n   *\n   *\n   * export class ProductsQuery extends QueryEntity<ProductsState> {\n   *   ui: EntityUIQuery<ProductsUIState>;\n   *\n   *   constructor(protected store: ProductsStore) {\n   *     super(store);\n   *     this.createUIQuery();\n   *   }\n   *\n   * }\n   */\n  createUIQuery() {\n    this.ui = new EntityUIQuery(this.__store__.ui);\n  }\n  selectAt(mapFn, project) {\n    return this.select(state => state.ids).pipe(map(mapFn), distinctUntilChanged(), switchMap(id => this.selectEntity(id, project)));\n  }\n}\n// @internal\nexport class EntityUIQuery extends QueryEntity {\n  constructor(store) {\n    super(store);\n  }\n}\n", "import { Store } from './store';\nimport { Query } from './query';\nimport { EntityStore } from './entityStore';\nimport { QueryEntity } from './queryEntity';\nexport function createStore(initialState, options) {\n  return new Store(initialState, options);\n}\nexport function createQuery(store) {\n  return new Query(store);\n}\nexport function createEntityStore(initialState, options) {\n  return new EntityStore(initialState, options);\n}\nexport function createEntityQuery(store, options = {}) {\n  return new QueryEntity(store, options);\n}\n", "/**\n * @internal\n *\n * @example\n *\n * getValue(state, 'todos.ui')\n *\n */\nexport function getValue(obj, prop) {\n  /** return the whole state  */\n  if (prop.split('.').length === 1) {\n    return obj;\n  }\n  const removeStoreName = prop.split('.').slice(1).join('.');\n  return removeStoreName.split('.').reduce((acc, part) => acc && acc[part], obj);\n}\n", "/**\n * Generate random guid\n *\n * @example\n *\n * {\n *   id: guid()\n * }\n *\n * @remarks this isn't a GUID, but a 10 char random alpha-num\n */\nexport function guid() {\n  return Math.random().toString(36).slice(2);\n}\n", "import { isArray } from './isArray';\n// @internal\nexport function isNumber(value) {\n  return !isArray(value) && value - parseFloat(value) + 1 >= 0;\n}\n", "import { isObject } from './isObject';\n/**\n * @internal\n *\n * @example\n * setValue(state, 'todos.ui', { filter: {} })\n */\nexport function setValue(obj, prop, val, replace = false) {\n  const split = prop.split('.');\n  if (split.length === 1) {\n    return {\n      ...obj,\n      ...val\n    };\n  }\n  obj = {\n    ...obj\n  };\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n  removeStoreName.reduce((acc, part, index) => {\n    if (index !== lastIndex) {\n      acc[part] = {\n        ...acc[part]\n      };\n      return acc && acc[part];\n    }\n    acc[part] = replace || Array.isArray(acc[part]) || !isObject(acc[part]) ? val : {\n      ...acc[part],\n      ...val\n    };\n    return acc && acc[part];\n  }, obj);\n  return obj;\n}\n", "import { filter, from, isObservable, map, of, ReplaySubject, skip } from 'rxjs';\nimport { setAction } from './actions';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { getValue } from './getValueByString';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { hasLocalStorage, hasSessionStorage, isNotBrowser } from './root';\nimport { setValue } from './setValueByString';\nimport { __stores__ } from './stores';\nlet skipStorageUpdate = false;\nconst _persistStateInit = new ReplaySubject(1);\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\nexport function setSkipStorageUpdate(skip) {\n  skipStorageUpdate = skip;\n}\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\nfunction isPromise(v) {\n  return v && isFunction(v.then);\n}\nfunction observify(asyncOrValue) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n  return of(asyncOrValue);\n}\nexport function persistState(params) {\n  const defaults = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: !hasLocalStorage() ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    select: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function (storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function (storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => source => source\n  };\n  const {\n    storage,\n    enableInNonBrowser,\n    deserialize,\n    serialize,\n    include,\n    select,\n    key,\n    preStorageUpdate,\n    persistOnDestroy,\n    preStorageUpdateOperator,\n    preStoreUpdate,\n    skipStorageUpdate\n  } = Object.assign({}, defaults, params);\n  if (isNotBrowser && !enableInNonBrowser || !storage) return;\n  const hasInclude = include.length > 0;\n  const hasSelect = select.length > 0;\n  let includeStores;\n  let selectStores;\n  if (hasInclude) {\n    includeStores = include.reduce((acc, path) => {\n      if (isFunction(path)) {\n        acc.fns.push(path);\n      } else {\n        const storeName = path.split('.')[0];\n        acc[storeName] = path;\n      }\n      return acc;\n    }, {\n      fns: []\n    });\n  }\n  if (hasSelect) {\n    selectStores = select.reduce((acc, selectFn) => {\n      acc[selectFn.storeName] = selectFn;\n      return acc;\n    }, {});\n  }\n  let stores = {};\n  const acc = {};\n  const subscriptions = [];\n  const buffer = [];\n  function _save(v) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  }\n  // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n  const isLocalStorage = hasLocalStorage() && storage === localStorage || hasSessionStorage() && storage === sessionStorage;\n  observify(storage.getItem(key)).subscribe(value => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n    function save(storeCache) {\n      storageState['$cache'] = {\n        ...(storageState['$cache'] || {}),\n        ...storeCache\n      };\n      storageState = Object.assign({}, storageState, acc);\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n      _save(buffer.shift());\n    }\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]._select(state => getValue(state, path)).pipe(skip(1), map(store => {\n        if (hasSelect && selectStores[storeName]) {\n          return selectStores[storeName](store);\n        }\n        return store;\n      }), filter(() => skipStorageUpdate() === false), preStorageUpdateOperator()).subscribe(data => {\n        acc[storeName] = preStorageUpdate(storeName, data);\n        Promise.resolve().then(() => save({\n          [storeName]: __stores__[storeName]._cache().getValue()\n        }));\n      });\n    }\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n        store._setState(state => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName], state));\n        });\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n        __stores__[storeName].setHasCache(hasCache, {\n          restartTTL: true\n        });\n      }\n    }\n    subscriptions.push($$deleteStore.subscribe(storeName => {\n      if (stores[storeName]) {\n        if (persistOnDestroy === false) {\n          save({\n            [storeName]: false\n          });\n        }\n        stores[storeName].unsubscribe();\n        delete stores[storeName];\n      }\n    }));\n    subscriptions.push($$addStore.subscribe(storeName => {\n      if (storeName === 'router') {\n        return;\n      }\n      const store = __stores__[storeName];\n      if (hasInclude) {\n        let path = includeStores[storeName];\n        if (!path) {\n          const passPredicate = includeStores.fns.some(fn => fn(storeName));\n          if (passPredicate) {\n            path = storeName;\n          } else {\n            return;\n          }\n        }\n        setInitial(storeName, store, path);\n        subscribe(storeName, path);\n      } else {\n        setInitial(storeName, store, storeName);\n        subscribe(storeName, storeName);\n      }\n    }));\n    _persistStateInit.next(true);\n  });\n  return {\n    destroy() {\n      subscriptions.forEach(s => s.unsubscribe());\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n      const value = storage.getItem(key);\n      observify(value).subscribe(v => {\n        const storageState = deserialize(v || '{}');\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    }\n  };\n}\n", "import { filterNilValue } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\nexport class AkitaPlugin {\n  constructor(query, config) {\n    this.query = query;\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n  /** This method is responsible for getting access to the query. */\n  getQuery() {\n    return this.query;\n  }\n  /** This method is responsible for getting access to the store. */\n  getStore() {\n    return this.getQuery().__store__;\n  }\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  isEntityBased(entityId) {\n    return toBoolean(entityId);\n  }\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  selectSource(entityId, property) {\n    if (this.isEntityBased(entityId)) {\n      return this.getQuery().selectEntity(entityId).pipe(filterNilValue());\n    }\n    if (property) {\n      return this.getQuery().select(state => getValue(state, this.withStoreName(property)));\n    }\n    return this.getQuery().select();\n  }\n  getSource(entityId, property) {\n    if (this.isEntityBased(entityId)) {\n      return this.getQuery().getEntity(entityId);\n    }\n    const state = this.getQuery().getValue();\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n    return state;\n  }\n  withStoreName(prop) {\n    return `${this.storeName}.${prop}`;\n  }\n  get storeName() {\n    return this.getStore().storeName;\n  }\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  updateStore(newState, entityId, property, replace = false) {\n    if (this.isEntityBased(entityId)) {\n      const store = this.getStore();\n      replace ? store.replace(entityId, newState) : store.update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState(state => {\n          return setValue(state, this.withStoreName(property), newState, true);\n        });\n        return;\n      }\n      const nextState = replace ? newState : state => ({\n        ...state,\n        ...newState\n      });\n      this.getStore()._setState(nextState);\n    }\n  }\n  /**\n   * Function to invoke upon reset\n   */\n  onReset(fn) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n", "import { BehaviorSubject, combineLatest, distinctUntilChanged, map, skip, Subject } from 'rxjs';\nimport { logAction } from '../../actions';\nimport { coerceArray } from '../../coerceArray';\nimport { isFunction } from '../../isFunction';\nimport { isUndefined } from '../../isUndefined';\nimport { QueryEntity } from '../../queryEntity';\nimport { AkitaPlugin } from '../plugin';\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\nexport function getNestedPath(nestedObj, path) {\n  const pathAsArray = path.split('.');\n  return pathAsArray.reduce((obj, key) => obj && obj[key] !== 'undefined' ? obj[key] : undefined, nestedObj);\n}\nexport class DirtyCheckPlugin extends AkitaPlugin {\n  constructor(query, params, _entityId) {\n    super(query);\n    this.query = query;\n    this.params = params;\n    this._entityId = _entityId;\n    this.dirty = new BehaviorSubject(false);\n    this.active = false;\n    this._reset = new Subject();\n    this.isDirty$ = this.dirty.asObservable().pipe(distinctUntilChanged());\n    this.reset$ = this._reset.asObservable();\n    this.params = {\n      ...dirtyCheckDefaultParams,\n      ...params\n    };\n    if (this.params.watchProperty) {\n      const watchProp = coerceArray(this.params.watchProperty);\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n  reset(params = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, this.getQuery().getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, this.getQuery().getValue());\n      }\n    }\n    logAction(`@DirtyCheck - Revert`);\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next(true);\n  }\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n  isDirty() {\n    return !!this.dirty.value;\n  }\n  hasHead() {\n    return !!this.getHead();\n  }\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n  isPathDirty(path) {\n    const head = this.getHead();\n    const current = this.getQuery().getValue();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n  getHead() {\n    return this.head;\n  }\n  activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const sources = this.params.watchProperty ? this.params.watchProperty.map(prop => this.query.select(state => state[prop]).pipe(map(val => ({\n      val,\n      __akitaKey: prop\n    })))) : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(sources).pipe(skip(1)).subscribe(currentState => {\n      if (isUndefined(this.head)) return;\n      /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n      const isChange = currentState.some(state => {\n        const head = state.__akitaKey ? this.head[state.__akitaKey] : this.head;\n        const compareTo = state.__akitaKey ? state.val : state;\n        return this.params.comparator(head, compareTo);\n      });\n      this.updateDirtiness(isChange);\n    });\n  }\n  updateDirtiness(isDirty) {\n    this.dirty.next(isDirty);\n  }\n  _getHead() {\n    let head = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head);\n    }\n    return head;\n  }\n  getWatchedValues(source) {\n    return this.params.watchProperty.reduce((watched, prop) => {\n      watched[prop] = source[prop];\n      return watched;\n    }, {});\n  }\n}\n", "import { isUndefined } from '../isUndefined';\nimport { coerceArray } from '../coerceArray';\nimport { toBoolean } from '../toBoolean';\nimport { isFunction } from '../isFunction';\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport class EntityCollectionPlugin {\n  constructor(query, entityIds) {\n    this.query = query;\n    this.entityIds = entityIds;\n    this.entities = new Map();\n  }\n  /**\n   * Get the entity plugin instance.\n   */\n  getEntity(id) {\n    return this.entities.get(id);\n  }\n  /**\n   * Whether the entity plugin exist.\n   */\n  hasEntity(id) {\n    return this.entities.has(id);\n  }\n  /**\n   * Remove the entity plugin instance.\n   */\n  removeEntity(id) {\n    this.destroy(id);\n    return this.entities.delete(id);\n  }\n  /**\n   * Set the entity plugin instance.\n   */\n  createEntity(id, plugin) {\n    return this.entities.set(id, plugin);\n  }\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  getIds() {\n    return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);\n  }\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  resolvedIds(ids) {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  rebase(ids, actions = {}) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id));\n      });\n    }\n  }\n  /**\n   * Listen for add/remove entities.\n   */\n  selectIds() {\n    return this.query.select(state => state.ids);\n  }\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  activate(ids) {\n    this.rebase(ids);\n  }\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  forEachId(ids, cb) {\n    const _ids = this.resolvedIds(ids);\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n", "import { auditTime, map, merge, skip, Subject } from 'rxjs';\nimport { coerceArray } from '../../coerceArray';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nimport { dirtyCheckDefaultParams, DirtyCheckPlugin, getNestedPath } from './dirtyCheckPlugin';\nexport class EntityDirtyCheckPlugin extends EntityCollectionPlugin {\n  constructor(query, params = {}) {\n    super(query, params.entityIds);\n    this.query = query;\n    this.params = params;\n    this._someDirty = new Subject();\n    this.someDirty$ = merge(this.query.select(state => state.entities), this._someDirty.asObservable()).pipe(auditTime(0), map(() => this.checkSomeDirty()));\n    this.params = {\n      ...dirtyCheckDefaultParams,\n      ...params\n    };\n    // TODO lazy activate?\n    this.activate();\n    this.selectIds().pipe(skip(1)).subscribe(ids => {\n      super.rebase(ids, {\n        afterAdd: plugin => plugin.setHead()\n      });\n    });\n  }\n  setHead(ids) {\n    if (this.params.entityIds && ids) {\n      const toArray = coerceArray(ids);\n      const someAreWatched = coerceArray(this.params.entityIds).some(id => toArray.indexOf(id) > -1);\n      if (someAreWatched === false) {\n        return this;\n      }\n    }\n    this.forEachId(ids, e => e.setHead());\n    this._someDirty.next(true);\n    return this;\n  }\n  hasHead(id) {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n    return false;\n  }\n  reset(ids, params = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n  isDirty(id, asObservable = true) {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n    return false;\n  }\n  someDirty() {\n    return this.checkSomeDirty();\n  }\n  isPathDirty(id, path) {\n    if (this.entities.has(id)) {\n      const head = this.getEntity(id).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n    return null;\n  }\n  destroy(ids) {\n    this.forEachId(ids, e => e.destroy());\n    /** complete only when the plugin destroys */\n    if (!ids) {\n      this._someDirty.complete();\n    }\n  }\n  instantiatePlugin(id) {\n    return new DirtyCheckPlugin(this.query, this.params, id);\n  }\n  checkSomeDirty() {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      if (this.getEntity(id).isDirty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n", "import { __decorate, __metadata } from \"tslib\";\nimport { BehaviorSubject, delay, from, isObservable, map, switchMap, take } from 'rxjs';\nimport { action, logAction } from '../../actions';\nimport { isNil } from '../../isNil';\nimport { isUndefined } from '../../isUndefined';\nimport { applyTransaction } from '../../transaction';\nimport { AkitaPlugin } from '../plugin';\nconst paginatorDefaults = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined,\n  clearStoreWithCache: true\n};\nexport class PaginatorPlugin extends AkitaPlugin {\n  constructor(query, config = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({\n          clearCache: true,\n          currentPage: 1\n        });\n      }\n    });\n    this.query = query;\n    this.config = config;\n    /** Save current filters, sorting, etc. in cache */\n    this.metadata = new Map();\n    this.pages = new Map();\n    this.pagination = {\n      currentPage: 1,\n      perPage: 0,\n      total: 0,\n      lastPage: 0,\n      data: []\n    };\n    /**\n     * When the user navigates to a different page and return\n     * we don't want to call `clearCache` on first time.\n     */\n    this.initial = true;\n    /**\n     * Proxy to the query loading\n     */\n    this.isLoading$ = this.query.selectLoading().pipe(delay(0));\n    this.config = {\n      ...paginatorDefaults,\n      ...config\n    };\n    const {\n      startWith,\n      cacheTimeout\n    } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(() => this.clearCache());\n    }\n  }\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n  /**\n   * Update the pagination object and add the page\n   */\n  update(response) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data) {\n    this.pages.set(this.currentPage, {\n      ids: data.map(entity => entity[this.getStore().idKey])\n    });\n    this.getStore().upsertMany(data);\n  }\n  /**\n   * Clear the cache.\n   */\n  clearCache(options = {}) {\n    if (!this.initial) {\n      logAction('@Pagination - Clear Cache');\n      if (options.clearStore !== false && (this.config.clearStoreWithCache || options.clearStore)) {\n        this.getStore().remove();\n      }\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n  clearPage(page) {\n    this.pages.delete(page);\n  }\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({\n    clearCache,\n    currentPage\n  } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page) {\n    return this.currentPage === page;\n  }\n  /**\n   * Set the current page\n   */\n  setPage(page) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next(this.pagination.currentPage = page);\n    }\n  }\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page) {\n    return this.pages.has(page);\n  }\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req) {\n    let page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(switchMap(config => {\n        page = config.currentPage;\n        applyTransaction(() => {\n          this.setLoading(false);\n          this.update(config);\n        });\n        return this.selectPage(page);\n      }));\n    }\n  }\n  getQuery() {\n    return this.query;\n  }\n  refreshCurrentPage() {\n    if (isNil(this.currentPage) === false) {\n      this.clearPage(this.currentPage);\n      this.setPage(this.currentPage);\n    }\n  }\n  getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n  getTo() {\n    if (this.isLast) {\n      return this.pagination.total;\n    }\n    return this.currentPage * this.pagination.perPage;\n  }\n  /**\n   * Select the page\n   */\n  selectPage(page) {\n    return this.query.selectAll({\n      asObject: true\n    }).pipe(take(1), map(entities => {\n      const response = {\n        ...this.pagination,\n        data: this.pages.get(page).ids.map(id => entities[id])\n      };\n      const {\n        range,\n        pagesControls\n      } = this.config;\n      /** If no total - calc it */\n      if (isNaN(this.pagination.total)) {\n        if (response.lastPage === 1) {\n          response.total = response.data ? response.data.length : 0;\n        } else {\n          response.total = response.perPage * response.lastPage;\n        }\n        this.pagination.total = response.total;\n      }\n      if (range) {\n        response.from = this.getFrom();\n        response.to = this.getTo();\n      }\n      if (pagesControls) {\n        response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n      }\n      return response;\n    }));\n  }\n}\n__decorate([action('@Pagination - New Page'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], PaginatorPlugin.prototype, \"update\", null);\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total, perPage) {\n  const len = Math.ceil(total / perPage);\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n", "import { debounceTime } from 'rxjs';\nimport { logAction } from '../../actions';\nimport { getValue } from '../../getValueByString';\nimport { isString } from '../../isString';\nimport { setValue } from '../../setValueByString';\nimport { toBoolean } from '../../toBoolean';\nimport { AkitaPlugin } from '../plugin';\nexport class PersistNgFormPlugin extends AkitaPlugin {\n  constructor(query, factoryFnOrPath, params = {}) {\n    super(query);\n    this.query = query;\n    this.factoryFnOrPath = factoryFnOrPath;\n    this.params = params;\n    this.params = {\n      ...{\n        debounceTime: 300,\n        formKey: 'akitaForm',\n        emitEvent: false,\n        arrControlFactory: v => this.builder.control(v)\n      },\n      ...params\n    };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n  setForm(form, builder) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n  reset(initialState) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : this.factoryFnOrPath();\n    }\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, this.params.arrControlFactory(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, {\n      emitEvent: this.params.emitEvent\n    });\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : {\n      [this.params.formKey]: value\n    };\n    this.updateStore(storeValue);\n  }\n  cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n  resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, factory(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n  activate() {\n    let path;\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());\n        this.form.patchValue(this.initialValue, {\n          emitEvent: this.params.emitEvent\n        });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getValue(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, {\n          emitEvent: this.params.emitEvent\n        });\n      }\n    } else {\n      if (!this.getQuery().getValue()[this.params.formKey]) {\n        logAction('@PersistNgFormPlugin activate');\n        this.updateStore({\n          [this.params.formKey]: this.factoryFnOrPath()\n        });\n      }\n      const value = this.getQuery().getValue()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      logAction('@PersistForm - Update');\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({\n            ...state,\n            ...value\n          });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({\n          [this.params.formKey]: value\n        });\n      }\n      this.updateStore(newState(this.getQuery().getValue()));\n    });\n  }\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n", "import { BehaviorSubject, distinctUntilChanged, pairwise } from 'rxjs';\nimport { logAction } from '../../actions';\nimport { isFunction } from '../../isFunction';\nimport { AkitaPlugin } from '../plugin';\nexport class StateHistoryPlugin extends AkitaPlugin {\n  constructor(query, params = {}, _entityId) {\n    super(query, {\n      resetFn: () => this.clear()\n    });\n    this.query = query;\n    this.params = params;\n    this._entityId = _entityId;\n    /** Allow skipping an update from outside */\n    this.skip = false;\n    this.history = {\n      past: [],\n      present: null,\n      future: []\n    };\n    /** Skip the update when redo/undo */\n    this.skipUpdate = false;\n    params.maxAge = params.maxAge ? params.maxAge : 10;\n    params.comparator = params.comparator || (() => true);\n    this.activate();\n  }\n  /**\n   * Observable stream representing whether the history plugin has an available past\n   *\n   */\n  get hasPast$() {\n    return this._hasPast$;\n  }\n  /**\n   * Observable stream representing whether the history plugin has an available future\n   *\n   */\n  get hasFuture$() {\n    return this._hasFuture$;\n  }\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n  get property() {\n    return this.params.watchProperty;\n  }\n  /* Updates the hasPast$ hasFuture$ observables*/\n  updateHasHistory() {\n    this.hasFutureSubject.next(this.hasFuture);\n    this.hasPastSubject.next(this.hasPast);\n  }\n  activate() {\n    this.hasPastSubject = new BehaviorSubject(false);\n    this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());\n    this.hasFutureSubject = new BehaviorSubject(false);\n    this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());\n    this.history.present = this.getSource(this._entityId, this.property);\n    this.subscription = this.selectSource(this._entityId, this.property).pipe(pairwise()).subscribe(([past, present]) => {\n      if (this.skip) {\n        this.skip = false;\n        return;\n      }\n      /**\n       *  comparator: (prev, current) => isEqual(prev, current) === false\n       */\n      const shouldUpdate = this.params.comparator(past, present);\n      if (!this.skipUpdate && shouldUpdate) {\n        if (this.history.past.length === this.params.maxAge) {\n          this.history.past = this.history.past.slice(1);\n        }\n        this.history.past = [...this.history.past, past];\n        this.history.present = present;\n        this.updateHasHistory();\n      }\n    });\n  }\n  undo() {\n    if (this.history.past.length > 0) {\n      const {\n        past,\n        present\n      } = this.history;\n      const previous = past[past.length - 1];\n      this.history.past = past.slice(0, past.length - 1);\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n  redo() {\n    if (this.history.future.length > 0) {\n      const {\n        past,\n        present\n      } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n  jumpToPast(index) {\n    if (index < 0 || index >= this.history.past.length) return;\n    const {\n      past,\n      future,\n      present\n    } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9];\n     * const index = 2;\n     *\n     * newPast = past.slice(0, index) = [1, 2];\n     * newPresent = past[index] = 3;\n     * newFuture = [...past.slice(index + 1),present, ...future] = [4, 5, 6, 7, 8, 9];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), present, ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n  jumpToFuture(index) {\n    if (index < 0 || index >= this.history.future.length) return;\n    const {\n      past,\n      future,\n      present\n    } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9, 10]\n     * const index = 1\n     *\n     * newPast = [...past, present, ...future.slice(0, index) = [1, 2, 3, 4, 5, 6, 7];\n     * newPresent = future[index] = 8;\n     * newFuture = futrue.slice(index+1) = [9, 10];\n     *\n     */\n    const newPast = [...past, present, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n  /**\n   *\n   * jump n steps in the past or forward\n   *\n   */\n  jump(n) {\n    if (n > 0) return this.jumpToFuture(n - 1);\n    if (n < 0) return this.jumpToPast(this.history.past.length + n);\n  }\n  /**\n   * Clear the history\n   *\n   * @param customUpdateFn Callback function for only clearing part of the history\n   *\n   * @example\n   *\n   * stateHistory.clear((history) => {\n   *  return {\n   *    past: history.past,\n   *    present: history.present,\n   *    future: []\n   *  };\n   * });\n   */\n  clear(customUpdateFn) {\n    this.history = isFunction(customUpdateFn) ? customUpdateFn(this.history) : {\n      past: [],\n      present: null,\n      future: []\n    };\n    this.updateHasHistory();\n  }\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n  ignoreNext() {\n    this.skip = true;\n  }\n  update(action = 'Undo') {\n    this.skipUpdate = true;\n    logAction(`@StateHistory - ${action}`);\n    this.updateStore(this.history.present, this._entityId, this.property, true);\n    this.updateHasHistory();\n    this.skipUpdate = false;\n  }\n}\n", "import { skip } from 'rxjs';\nimport { toBoolean } from '../../toBoolean';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nimport { StateHistoryPlugin } from './stateHistoryPlugin';\nexport class EntityStateHistoryPlugin extends EntityCollectionPlugin {\n  constructor(query, params = {}) {\n    super(query, params.entityIds);\n    this.query = query;\n    this.params = params;\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds().pipe(skip(1)).subscribe(ids => this.activate(ids));\n  }\n  redo(ids) {\n    this.forEachId(ids, e => e.redo());\n  }\n  undo(ids) {\n    this.forEachId(ids, e => e.undo());\n  }\n  hasPast(id) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n  hasFuture(id) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n  jumpToFuture(ids, index) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n  jumpToPast(ids, index) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n  clear(ids, customUpdateFn) {\n    this.forEachId(ids, e => e.clear(customUpdateFn));\n  }\n  destroy(ids, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n  ignoreNext(ids) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n  instantiatePlugin(id) {\n    return new StateHistoryPlugin(this.query, this.params, id);\n  }\n}\n", "import { __stores__ } from './stores';\nimport { applyTransaction } from './transaction';\n/**\n * Reset stores back to their initial state\n *\n * @example\n *\n * resetStores()\n * resetStores({\n *   exclude: ['auth']\n * })\n */\nexport function resetStores(options) {\n  const defaults = {\n    exclude: []\n  };\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n", "import { AkitaError } from './errors';\nimport { isNil } from './isNil';\nimport { configKey } from './storeConfig';\nimport { __stores__ } from './stores';\nexport var StoreAction;\n(function (StoreAction) {\n  StoreAction[\"Update\"] = \"UPDATE\";\n})(StoreAction || (StoreAction = {}));\nconst StoreActionMapping = {\n  [StoreAction.Update]: 'update'\n};\nexport var EntityStoreAction;\n(function (EntityStoreAction) {\n  EntityStoreAction[\"Update\"] = \"UPDATE\";\n  EntityStoreAction[\"AddEntities\"] = \"ADD_ENTITIES\";\n  EntityStoreAction[\"SetEntities\"] = \"SET_ENTITIES\";\n  EntityStoreAction[\"UpdateEntities\"] = \"UPDATE_ENTITIES\";\n  EntityStoreAction[\"RemoveEntities\"] = \"REMOVE_ENTITIES\";\n  EntityStoreAction[\"UpsertEntities\"] = \"UPSERT_ENTITIES\";\n  EntityStoreAction[\"UpsertManyEntities\"] = \"UPSERT_MANY_ENTITIES\";\n})(EntityStoreAction || (EntityStoreAction = {}));\nconst EntityStoreActionMapping = {\n  [EntityStoreAction.Update]: 'update',\n  [EntityStoreAction.AddEntities]: 'add',\n  [EntityStoreAction.SetEntities]: 'set',\n  [EntityStoreAction.UpdateEntities]: 'update',\n  [EntityStoreAction.RemoveEntities]: 'remove',\n  [EntityStoreAction.UpsertEntities]: 'upsert',\n  [EntityStoreAction.UpsertManyEntities]: 'upsertMany'\n};\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeClass The {@link Store} class of the instance to be returned.\n */\nexport function getStore(storeClass) {\n  return getStoreByName(storeClass[configKey]['storeName']);\n}\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeName The {@link Store} name of the instance to be returned.\n */\nexport function getStoreByName(storeName) {\n  const store = __stores__[storeName];\n  if (isNil(store)) {\n    throw new AkitaError(`${store.storeName} doesn't exist`);\n  }\n  return store;\n}\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeClass The {@link EntityStore} class of the instance to be returned.\n */\nexport function getEntityStore(storeClass) {\n  return getStore(storeClass);\n}\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeName The {@link EntityStore} name of the instance to be returned.\n */\nexport function getEntityStoreByName(storeName) {\n  return getStoreByName(storeName);\n}\nexport function runStoreAction(storeClassOrName, action, operation) {\n  const store = typeof storeClassOrName === 'string' ? getStoreByName(storeClassOrName) : getStore(storeClassOrName);\n  operation(store[StoreActionMapping[action]].bind(store));\n}\nexport function runEntityStoreAction(storeClassOrName, action, operation) {\n  const store = typeof storeClassOrName === 'string' ? getEntityStoreByName(storeClassOrName) : getEntityStore(storeClassOrName);\n  operation(store[EntityStoreActionMapping[action]].bind(store));\n}\n", "import { defer, finalize } from 'rxjs';\nexport function setLoading(store) {\n  return function (source) {\n    return defer(() => {\n      store.setLoading(true);\n      return source.pipe(finalize(() => store.setLoading(false)));\n    });\n  };\n}\n", "import { defer, tap } from 'rxjs';\nexport function setLoadingAndError(store) {\n  return function (source) {\n    return defer(() => {\n      store.setLoading(true);\n      store.setError(null);\n      return source.pipe(tap({\n        error(err) {\n          store.setLoading(false);\n          store.setError(err);\n        },\n        complete() {\n          store.setLoading(false);\n        }\n      }));\n    });\n  };\n}\n", "import { filter, take } from 'rxjs';\nimport { $$addStore } from './dispatchers';\nimport { isString } from './isString';\nimport { setSkipStorageUpdate } from './persistState';\nimport { __stores__ } from './stores';\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things such as saving the state in the server\n   */\n  getStoresSnapshot(stores = []) {\n    const acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      const storeName = keys[i];\n      if (storeName !== 'router') {\n        acc[storeName] = __stores__[storeName]._value();\n      }\n    }\n    return acc;\n  }\n  setStoresSnapshot(stores, options) {\n    const mergedOptions = {\n      ...{\n        skipStorageUpdate: false,\n        lazy: false\n      },\n      ...options\n    };\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(true);\n    let normalizedStores = stores;\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores);\n    }\n    const size = Object.keys(normalizedStores).length;\n    if (mergedOptions.lazy) {\n      $$addStore.pipe(filter(name => normalizedStores.hasOwnProperty(name)), take(size)).subscribe(name => __stores__[name]._setState(() => normalizedStores[name]));\n    } else {\n      for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n        const storeName = keys[i];\n        if (__stores__[storeName]) {\n          __stores__[storeName]._setState(() => normalizedStores[storeName]);\n        }\n      }\n    }\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(false);\n  }\n}\nexport const snapshotManager = new SnapshotManager();\n", "import { DEFAULT_ID_KEY } from './defaultIDKey';\n// @internal\nexport function toEntitiesIds(entities, idKey = DEFAULT_ID_KEY) {\n  const ids = [];\n  for (const entity of entities) {\n    ids.push(entity[idKey]);\n  }\n  return ids;\n}\n", "import { filter, first, merge, of, switchMap, tap } from 'rxjs';\n/**\n * Track id updates of an entity and re-evaluation the query with the changed entity id.\n * Hint: Don't place the operator after other operators in the same pipeline as those will be skipped on\n * re-evaluation. Also, it can't be used with the selection operator, e.g <code>selectEntity(1, e => e.title)</code>\n * @param query The query from which the entity is selected.\n * @example\n *\n *   query.selectEntity(1).pipe(trackIdChanges(query)).subscribe(entity => { ... })\n *\n */\nexport function trackIdChanges(query) {\n  return source => source.lift(new TrackIdChanges(query));\n}\nclass TrackIdChanges {\n  constructor(query) {\n    this.query = query;\n  }\n  call(subscriber, source) {\n    return source.pipe(first(), switchMap(entity => {\n      let currId = entity[this.query.__store__.config.idKey];\n      let pending = false;\n      return merge(of({\n        newId: undefined,\n        oldId: currId,\n        pending: false\n      }), this.query.__store__.selectEntityIdChanges$).pipe(\n      // the new id must differ form the old id\n      filter(change => change.oldId === currId),\n      // extract the current pending state of the id update\n      tap(change => pending = change.pending),\n      // only update the selection query if the id update is already applied to the store\n      filter(change => change.newId !== currId && !pending),\n      // build a selection query for the new entity id\n      switchMap(change => this.query.selectEntity(currId = change.newId || currId)\n      // skip undefined value if pending.\n      .pipe(filter(() => !pending))));\n    })).subscribe(subscriber);\n  }\n}\n"],
  "mappings": "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",
  "names": ["skip", "action", "action", "action", "skip", "storeName", "Order", "map", "EntityActions", "action", "action", "from", "remove", "action", "skip", "skipStorageUpdate", "acc", "value", "entityId", "value", "action", "StoreAction", "EntityStoreAction", "action"]
}
