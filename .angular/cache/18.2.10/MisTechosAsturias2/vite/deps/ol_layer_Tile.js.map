{
  "version": 3,
  "sources": ["../../../../../../node_modules/ol/layer/TileProperty.js", "../../../../../../node_modules/ol/layer/BaseTile.js", "../../../../../../node_modules/ol/renderer/canvas/TileLayer.js", "../../../../../../node_modules/ol/layer/Tile.js"],
  "sourcesContent": ["/**\n * @module ol/layer/TileProperty\n */\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'\n};\n", "var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {import(\"../source/Tile.js\").default} [source] Source for this layer.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n */\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends {Layer<import(\"../source/Tile.js\").default>}\n * @api\n */\nvar BaseTileLayer = /** @class */function (_super) {\n  __extends(BaseTileLayer, _super);\n  /**\n   * @param {Options=} opt_options Tile layer options.\n   */\n  function BaseTileLayer(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({}, options);\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    _this = _super.call(this, baseOptions) || this;\n    _this.setPreload(options.preload !== undefined ? options.preload : 0);\n    _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);\n    return _this;\n  }\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  BaseTileLayer.prototype.getPreload = function () {\n    return /** @type {number} */this.get(TileProperty.PRELOAD);\n  };\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  BaseTileLayer.prototype.setPreload = function (preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  };\n  /**\n   * Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  BaseTileLayer.prototype.getUseInterimTilesOnError = function () {\n    return /** @type {boolean} */this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR);\n  };\n  /**\n   * Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  BaseTileLayer.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  };\n  return BaseTileLayer;\n}(Layer);\nexport default BaseTileLayer;\n", "var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse } from '../../transform.js';\nimport { assign } from '../../obj.js';\nimport { createEmpty, equals, getIntersection, getTopLeft } from '../../extent.js';\nimport { createTransformString } from '../../render/canvas.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { numberSafeCompareFunction } from '../../array.js';\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n */\nvar CanvasTileLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasTileLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} tileLayer Tile layer.\n   */\n  function CanvasTileLayerRenderer(tileLayer) {\n    var _this = _super.call(this, tileLayer) || this;\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    _this.extentChanged = true;\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.renderedPixelRatio;\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    _this.renderedProjection = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.renderedRevision;\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    _this.renderedTiles = [];\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.newTiles_ = false;\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.tmpExtent = createEmpty();\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {\n    var tileLayer = this.getLayer();\n    var tileState = tile.getState();\n    var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return tileState == TileState.LOADED || tileState == TileState.EMPTY || tileState == TileState.ERROR && !useInterimTilesOnError;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {\n    var pixelRatio = frameState.pixelRatio;\n    var projection = frameState.viewState.projection;\n    var tileLayer = this.getLayer();\n    var tileSource = tileLayer.getSource();\n    var tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (!tileLayer.getUseInterimTilesOnError()) {\n        // When useInterimTilesOnError is false, we consider the error tile as loaded.\n        tile.setState(TileState.LOADED);\n      } else if (tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  };\n  /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);\n    }\n    return false;\n  };\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {\n    return !!this.getLayer().getSource();\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var layerState = frameState.layerStatesArray[frameState.layerIndex];\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var viewResolution = viewState.resolution;\n    var viewCenter = viewState.center;\n    var rotation = viewState.rotation;\n    var pixelRatio = frameState.pixelRatio;\n    var tileLayer = this.getLayer();\n    var tileSource = tileLayer.getSource();\n    var sourceRevision = tileSource.getRevision();\n    var tileGrid = tileSource.getTileGridForProjection(projection);\n    var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    var tileResolution = tileGrid.getResolution(z);\n    var extent = frameState.extent;\n    var layerExtent = layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      extent = getIntersection(extent, fromUserExtent(layerState.extent, projection));\n    }\n    var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n    // desired dimensions of the canvas in pixels\n    var width = Math.round(frameState.size[0] * tilePixelRatio);\n    var height = Math.round(frameState.size[1] * tilePixelRatio);\n    if (rotation) {\n      var size = Math.round(Math.sqrt(width * width + height * height));\n      width = size;\n      height = size;\n    }\n    var dx = tileResolution * width / 2 / tilePixelRatio;\n    var dy = tileResolution * height / 2 / tilePixelRatio;\n    var canvasExtent = [viewCenter[0] - dx, viewCenter[1] - dy, viewCenter[0] + dx, viewCenter[1] + dy];\n    var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    var tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n    var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);\n    var tmpExtent = this.tmpExtent;\n    var tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        var tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          var uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            var inTransition = tile.inTransition(uid);\n            if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n        var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);\n        var covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);\n        }\n      }\n    }\n    var canvasScale = tileResolution / viewResolution;\n    // set forward and inverse pixel transforms\n    composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);\n    var canvasTransform = createTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    var context = this.context;\n    var canvas = context.canvas;\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n    assign(context, tileSource.getContextOptions());\n    this.preRender(context, frameState);\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    var zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(numberSafeCompareFunction);\n    var clips, clipZs, currentClip;\n    if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (var i = zs.length - 1; i >= 0; --i) {\n      var currentZ = zs[i];\n      var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n      var currentResolution = tileGrid.getResolution(currentZ);\n      var currentScale = currentResolution / tileResolution;\n      var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;\n      var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;\n      var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);\n      var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      var origin_1 = applyTransform(this.tempTransform, [tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution, tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution]);\n      var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n      var tilesToDraw = tilesToDrawByZ[currentZ];\n      for (var tileCoordKey in tilesToDraw) {\n        var tile = /** @type {import(\"../../ImageTile.js\").default} */tilesToDraw[tileCoordKey];\n        var tileCoord = tile.tileCoord;\n        // Calculate integer positions and sizes so that tiles align\n        var floatX = origin_1[0] - (originTileCoord[1] - tileCoord[1]) * dx_1;\n        var nextX = Math.round(floatX + dx_1);\n        var floatY = origin_1[1] - (originTileCoord[2] - tileCoord[2]) * dy_1;\n        var nextY = Math.round(floatY + dy_1);\n        var x = Math.round(floatX);\n        var y = Math.round(floatY);\n        var w = nextX - x;\n        var h = nextY - y;\n        var transition = z === currentZ;\n        var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            context.save();\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {\n              if (z !== currentZ && currentZ < clipZs[i_1]) {\n                var clip = clips[i_1];\n                context.beginPath();\n                // counter-clockwise (outer ring) for current tile\n                context.moveTo(currentClip[0], currentClip[1]);\n                context.lineTo(currentClip[2], currentClip[3]);\n                context.lineTo(currentClip[4], currentClip[5]);\n                context.lineTo(currentClip[6], currentClip[7]);\n                // clockwise (inner ring) for higher z tile\n                context.moveTo(clip[6], clip[7]);\n                context.lineTo(clip[4], clip[5]);\n                context.lineTo(clip[2], clip[3]);\n                context.lineTo(clip[0], clip[1]);\n                context.clip();\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);\n        if (clips && !inTransition) {\n          context.restore();\n        }\n        this.renderedTiles.push(tile);\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged = !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n    this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());\n    this.scheduleExpireCache(frameState, tileSource);\n    this.postRender(context, frameState);\n    if (layerState.extent) {\n      context.restore();\n    }\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n    return this.container;\n  };\n  /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   * @param {number} opacity Opacity.\n   */\n  CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition, opacity) {\n    var image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    var uid = getUid(this);\n    var tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;\n    var alpha = opacity * tileAlpha;\n    var alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (tileAlpha !== 1) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  CanvasTileLayerRenderer.prototype.getImage = function () {\n    var context = this.context;\n    return context ? context.canvas : null;\n  };\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {\n    return tile.getImage();\n  };\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */\n  CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../PluggableMap.js\").default} map Map.\n       * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n       */\n      var postRenderFunction = function (tileSource, map, frameState) {\n        var tileSourceKey = getUid(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);\n        }\n      }.bind(null, tileSource);\n      frameState.postRenderFunctions.push(/** @type {import(\"../../PluggableMap.js\").PostRenderFunction} */postRenderFunction);\n    }\n  };\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    var tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  };\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to 'preload' levels.\n   * @param {function(import(\"../../Tile.js\").default)=} opt_tileCallback Tile callback.\n   * @protected\n   */\n  CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {\n    var tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    var wantedTiles = frameState.wantedTiles[tileSourceKey];\n    var tileQueue = frameState.tileQueue;\n    var minZoom = tileGrid.getMinZoom();\n    var tileCount = 0;\n    var tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == TileState.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([tile, tileSourceKey, tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);\n              }\n            }\n            if (opt_tileCallback !== undefined) {\n              opt_tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  };\n  return CanvasTileLayerRenderer;\n}(CanvasLayerRenderer);\n/**\n * @function\n * @return {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default}\n */\nCanvasTileLayerRenderer.prototype.getLayer;\nexport default CanvasTileLayerRenderer;\n", "var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\nvar TileLayer = /** @class */function (_super) {\n  __extends(TileLayer, _super);\n  /**\n   * @param {import(\"./BaseTile.js\").Options=} opt_options Tile layer options.\n   */\n  function TileLayer(opt_options) {\n    return _super.call(this, opt_options) || this;\n  }\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n  TileLayer.prototype.createRenderer = function () {\n    return new CanvasTileLayerRenderer(this);\n  };\n  return TileLayer;\n}(BaseTileLayer);\nexport default TileLayer;\n"],
  "mappings": "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",
  "names": ["d", "b", "BaseTileLayer", "__extends", "d", "b", "CanvasTileLayerRenderer", "tileSource", "frameState", "Layer_default", "__extends", "d", "b", "TileLayer"]
}
